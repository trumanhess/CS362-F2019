        -:    0:Source:unittestbug11.c
        -:    0:Graph:unittestbug11.gcno
        -:    0:Data:unittestbug11.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        1:    8:int main()
        -:    9:{
        1:   10:    int seed = 1000;
        1:   11:    int numPlayers = 2;
        1:   12:    int thisPlayer = 0;
        1:   13:    int nextPlayer = 1;
        -:   14:	struct gameState preG, postG;
        1:   15:	int k[5] = {copper, silver, gold, ambassador, mine};
        -:   16:
        1:   17:    printf("\n\n-------------Testing Bug 11--------------\n\n");
        1:   18:    initializeGame(numPlayers, k, seed, &preG);
        -:   19:
        -:   20:/* 
        -:   21:    test 1: call ambassador case and select a duplicate card in hand
        -:   22:    expect: chosen card and duplicate to be copied into others' hands
        -:   23:*/
        1:   24:    printf("\n\nTest 1:\n");
        -:   25:
        1:   26:    preG.handCount[thisPlayer] = 5;
        1:   27:    preG.hand[thisPlayer][0] = copper;
        1:   28:	preG.hand[thisPlayer][1] = copper;
        1:   29:	preG.hand[thisPlayer][2] = silver;
        1:   30:	preG.hand[thisPlayer][3] = gold;
        1:   31:	preG.hand[thisPlayer][4] = ambassador;
        -:   32:
        1:   33:    preG.handCount[nextPlayer] = 1;
        1:   34:    preG.hand[nextPlayer][0] = gold;
        -:   35:
        1:   36:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   37:	cardEffect(ambassador, 1, 1, 0, &postG, 1, 0);
        -:   38:
        1:   39:    printf("\nHand Count (Next Player):\n");
        1:   40:    printf("before: %d, after: %d\n", preG.handCount[nextPlayer], postG.handCount[nextPlayer]); 
        1:   41:    ASSERT(preG.handCount[nextPlayer] + 1 == postG.handCount[nextPlayer]);
        -:   42:
        1:   43:    printf("\nNext player has discarded card in hand:\n");
        1:   44:    printf("before: %d, after: %d\n", preG.hand[nextPlayer][0], postG.hand[nextPlayer][0]); 
        1:   45:    ASSERT(preG.hand[nextPlayer][0] != postG.hand[nextPlayer][1]); // received new card
        -:   46:
        2:   47:    for(int i = 0; i < postG.handCount[nextPlayer]; i++)
        -:   48:    {
        1:   49:        printf("\ncard: %d", postG.hand[nextPlayer][i]);
        -:   50:    }
        -:   51:
        1:   52:    printf("\n\n-------------End Testing Bug 11---------------\n\n");
        -:   53:
        1:   54:    return 0;
        -:   55:}
