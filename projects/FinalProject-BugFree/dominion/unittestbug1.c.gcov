        -:    0:Source:unittestbug1.c
        -:    0:Graph:unittestbug1.gcno
        -:    0:Data:unittestbug1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        1:    8:int main()
        -:    9:{
        1:   10:    int seed = 1000;
        1:   11:    int numPlayers = 2;
        1:   12:    int thisPlayer = 0;
        -:   13:	struct gameState preG, postG;
        1:   14:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   15:			sea_hag, baron, smithy, council_room};
        -:   16:
        1:   17:    printf("\n\n-------------Testing Bug 1---------\n\n");
        1:   18:    initializeGame(numPlayers, k, seed, &preG);
        -:   19:
        -:   20:/* 
        -:   21:    test 1: call mine case, trash the chosen card
        -:   22:    expect: chosen card to be untrashed
        -:   23:*/
        1:   24:    printf("\n\nTest 1:\n");
        -:   25:
        1:   26:    preG.handCount[thisPlayer] = 5;
        1:   27:    preG.hand[thisPlayer][0] = copper;
        1:   28:	preG.hand[thisPlayer][1] = mine;
        1:   29:	preG.hand[thisPlayer][2] = duchy;
        1:   30:	preG.hand[thisPlayer][3] = estate;
        1:   31:	preG.hand[thisPlayer][4] = feast;
        -:   32:
        1:   33:    preG.discardCount[thisPlayer] = 0;
        1:   34:    preG.deckCount[thisPlayer] = 0;
        -:   35:
        1:   36:    preG.playedCardCount = 0;
        -:   37:
        1:   38:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   39:	cardEffect(11, 0, 5, 0, &postG, 1, 0);
        -:   40:
        1:   41:    printf("\nDiscard Count:\n");
        1:   42:    printf("before: %d, after: %d\n", preG.discardCount[thisPlayer], postG.discardCount[thisPlayer]);
        1:   43:    ASSERT(preG.discardCount[thisPlayer] + 1 == postG.discardCount[thisPlayer]);
        -:   44:
        1:   45:    printf("\nDeck Count:\n");
        1:   46:    printf("before: %d, after: %d\n", preG.deckCount[thisPlayer], postG.deckCount[thisPlayer]);
        1:   47:    ASSERT(preG.deckCount[thisPlayer] == postG.deckCount[thisPlayer]);
        -:   48:
        1:   49:    printf("\nHand Count:\n");
        1:   50:    printf("before: %d, after: %d\n", preG.handCount[thisPlayer], postG.handCount[thisPlayer]); 
        1:   51:    ASSERT(preG.handCount[thisPlayer] - 2 + 1 == postG.handCount[thisPlayer]);
        -:   52:
        1:   53:    printf("\nPlayed Card Count:\n");
        1:   54:    printf("before: %d, after: %d\n", preG.playedCardCount, postG.playedCardCount); 
        1:   55:    ASSERT(preG.playedCardCount + 1 == postG.playedCardCount); //only played one card
        -:   56:
        5:   57:    for(int i = 0; i < postG.handCount[thisPlayer]; i++)
        -:   58:    {
        4:   59:        printf("\ncard: %d", postG.hand[thisPlayer][i]);
        -:   60:    }
        -:   61:
        -:   62:
        1:   63:    printf("\n\n-------------End Testing Bug 1---------------\n\n");
        -:   64:
        1:   65:    return 0;
        -:   66:}
