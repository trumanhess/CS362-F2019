        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "custom_assert.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://tribute card
        -:    9:/*
        -:   10:    test 1: player2 has no cards
        -:   11:    test 2: player2 has one card in deck (copper) CHANGED
        -:   12:    test 3: player2 has one card in discard pile (action card) CHANGED
        -:   13:    test 4: player2 has a deck of five cards (treasure card, action card)
        -:   14:    test 5: player2 has a deck of five cards but duplicate (copper, copper)
        -:   15:*/
        -:   16:
        6:   17:int universalTest(struct gameState *pre, struct gameState *post, int discarded, int cardsGained, int buysGained, int coinsGained, int actionsGained, int player)
        -:   18:{
        6:   19:    printf("Number buys:\n");
        6:   20:    ASSERT((pre->numBuys + buysGained) == post->numBuys);
        6:   21:    printf("\texpected = %d, actual = %d\n", pre->numBuys + buysGained, post->numBuys);
        -:   22:
        6:   23:    printf("Number Actions:\n");
        6:   24:    ASSERT(post->numActions == pre->numActions + actionsGained);
        6:   25:    printf("\texpected = %d, actual = %d\n", pre->numActions + actionsGained, post->numActions);
        -:   26:
        6:   27:    printf("Number coins:\n");
        6:   28:    ASSERT((pre->coins + coinsGained) == post->coins);
        6:   29:    printf("\texpected = %d, actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   30:
        6:   31:    printf("Hand count:\n");
        6:   32:    ASSERT(post->handCount[player] == pre->handCount[player] - discarded + cardsGained);
        6:   33:    printf("\texpected = %d, actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        -:   34:
        6:   35:    return 0;
        -:   36:}
        -:   37:
        1:   38:int main()
        -:   39:{
        1:   40:    int cardsGained = 0;
        1:   41:    int cardsDiscarded = 0;
        1:   42:    int coinsGained = 0;
        1:   43:    int buysGained = 0;
        1:   44:    int actionsGained = 0;
        -:   45:
        1:   46:    int tributeRevealedCards[2] = {-1, -1};
        -:   47:
        1:   48:    int seed = 1000;
        1:   49:    int numPlayers = 2;
        1:   50:    int player1 = 0;
        1:   51:    int player2 = 1;
        -:   52:	struct gameState preG, postG;
        1:   53:	int k[10] = {adventurer, silver, copper, gold, mine, minion,
        -:   54:			sea_hag, baron, smithy, council_room};
        -:   55:
        1:   56:    printf("\n\n---------------------------------Testing Tribute--------------------------\n\n");
        1:   57:    initializeGame(numPlayers, k, seed, &preG);
        -:   58:
        -:   59:/*
        -:   60:    test 1: player2 has no cards
        -:   61:    expect: no change
        -:   62:*/
        1:   63:    printf("\n\nTest 1:\n");
        1:   64:    preG.hand[player1][0] = minion;
        1:   65:	preG.hand[player1][1] = copper;
        1:   66:	preG.hand[player1][2] = tribute;
        1:   67:	preG.hand[player1][3] = estate;
        1:   68:	preG.hand[player1][4] = mine;
        1:   69:    preG.handCount[player1] = 5;
        -:   70:
        1:   71:    preG.handCount[player2] = 0;
        1:   72:    preG.deckCount[player2] = 0;
        1:   73:    preG.discardCount[player2] = 0;
        -:   74:
        1:   75:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   76:    cardsDiscarded = 0;
        1:   77:    buysGained = 0;
        1:   78:    coinsGained = 0;
        1:   79:    actionsGained = 0;
        1:   80:    cardsGained = 0;
        1:   81:	card_tribute(&postG, player2, tributeRevealedCards, player1);
        -:   82:    //card_tribute(struct gameState *state,int nextPlayer,int *tributeRevealedCards,int currentPlayer)
        -:   83:
        1:   84:    ASSERT(preG.numActions + actionsGained == postG.numActions);
        -:   85:
        1:   86:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:   87:
        -:   88:/*
        -:   89:    test 2: player2 has one card in deck (copper)
        -:   90:    expect: player1 gain +2 coin; player2 one less card in hand (potentially a full deck because he would shuffle a new hand?)
        -:   91:*/
        1:   92:    printf("\n\nTest 2:\n");
        -:   93:
        1:   94:    preG.hand[player1][0] = minion;
        1:   95:	preG.hand[player1][1] = copper;
        1:   96:	preG.hand[player1][2] = tribute;
        1:   97:	preG.hand[player1][3] = estate;
        1:   98:	preG.hand[player1][4] = mine;
        -:   99:
        1:  100:    preG.deck[player2][0] = copper;
        1:  101:    preG.deckCount[player2] = 1;
        1:  102:    preG.discardCount[player2] = 0;
        -:  103:
        1:  104:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  105:    cardsDiscarded = 0;
        1:  106:    buysGained = 0;
        1:  107:    coinsGained = 2;
        1:  108:    actionsGained = 0;
        1:  109:    cardsGained = 0;
        1:  110:	card_tribute(&postG, player2, tributeRevealedCards, player1);
        -:  111:
        1:  112:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  113:
        1:  114:    ASSERT(preG.handCount[player2] - 1 == postG.handCount[player2]);
        -:  115:
        -:  116:/*
        -:  117:    test 3: player2 has one card in deck (action card)
        -:  118:    expect: player1 gain +2 actions; player2 to have one less card in deck (maybe he will have more from a shuffle?)
        -:  119:*/
        1:  120:    printf("\n\nTest 3:\n");
        -:  121:
        1:  122:    preG.hand[player1][0] = minion;
        1:  123:	preG.hand[player1][1] = copper;
        1:  124:	preG.hand[player1][2] = tribute;
        1:  125:	preG.hand[player1][3] = estate;
        1:  126:	preG.hand[player1][4] = mine;
        -:  127:
        1:  128:    preG.deck[player2][0] = tribute;
        1:  129:    preG.deckCount[player2] = 1;
        1:  130:    preG.discardCount[player2] = 0;
        -:  131:
        1:  132:    cardsDiscarded = 0;
        1:  133:    buysGained = 0;
        1:  134:    coinsGained = 0;
        1:  135:    actionsGained = 2;
        1:  136:    cardsGained = 0;
        1:  137:    memcpy(&postG, &preG, sizeof(struct gameState));
        -:  138:    
        1:  139:	card_tribute(&postG, player2, tributeRevealedCards, player1);
        -:  140:
        1:  141:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  142:
        1:  143:    ASSERT(preG.deckCount[player2] - 1 == postG.deckCount[player2]);
        -:  144:
        -:  145:/*
        -:  146:    test 4: player2 has a hand of five cards (victory card, treasure card)
        -:  147:    expect: player1 gains +2 cards and +2 actions; player2 loses two cards from hand
        -:  148:*/
        1:  149:    printf("\n\nTest 4:\n");
        -:  150:
        1:  151:    preG.hand[player1][0] = minion;
        1:  152:	preG.hand[player1][1] = tribute;
        1:  153:	preG.hand[player1][2] = tribute;
        1:  154:	preG.hand[player1][3] = estate;
        1:  155:	preG.hand[player1][4] = mine;
        1:  156:    preG.handCount[player1] = 5;
        -:  157:
        1:  158:    preG.deck[player2][0] = copper;
        1:  159:	preG.deck[player2][1] = estate;
        1:  160:	preG.deck[player2][2] = estate;
        1:  161:	preG.deck[player2][3] = estate;
        1:  162:	preG.deck[player2][4] = copper;
        -:  163:
        1:  164:    preG.deckCount[player2] = 5;
        1:  165:    preG.discardCount[player2] = 0;
        1:  166:    preG.handCount[player2] = 0;
        -:  167:
        1:  168:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  169:    cardsDiscarded = 0;
        1:  170:    buysGained = 0;
        1:  171:    coinsGained = 2;
        1:  172:    actionsGained = 0;
        1:  173:    cardsGained = 2;
        1:  174:	card_tribute(&postG, player2, tributeRevealedCards, player1);
        -:  175:
        1:  176:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  177:
        1:  178:    ASSERT(preG.handCount[player2] - 2 == postG.handCount[player2]);
        -:  179:
        -:  180:/*
        -:  181:    test 5: player2 has a hand of five cards (copper, copper)
        -:  182:    expect: player1 gains +2 coins; player2 loses two cards (?)
        -:  183:*/
        1:  184:    printf("\n\nTest 5:\n");
        -:  185:
        1:  186:    preG.hand[player1][0] = minion;
        1:  187:	preG.hand[player1][1] = copper;
        1:  188:	preG.hand[player1][2] = tribute;
        1:  189:	preG.hand[player1][3] = estate;
        1:  190:	preG.hand[player1][4] = mine;
        -:  191:
        1:  192:    preG.deck[player2][0] = copper;
        1:  193:	preG.deck[player2][1] = copper;
        1:  194:	preG.deck[player2][2] = tribute;
        1:  195:	preG.deck[player2][3] = estate;
        1:  196:	preG.deck[player2][4] = mine;
        -:  197:
        1:  198:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  199:    cardsDiscarded = 0;
        1:  200:    buysGained = 0;
        1:  201:    coinsGained = 2;
        1:  202:    actionsGained = 0;
        1:  203:    cardsGained = 0;
        1:  204:	card_tribute(&postG, player2, tributeRevealedCards, player1);
        -:  205:
        1:  206:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  207:
        1:  208:    ASSERT(preG.handCount[player2] - 2 == postG.handCount[player2]);
        -:  209:
        -:  210:    /*
        -:  211:    test 6: player2 has two cards in discard (treasure, victory)
        -:  212:    expect: player2 will shuffle discard into deck and player1 will gain stats from the top two cards
        -:  213:*/
        1:  214:    printf("\n\nTest 6:\n");
        -:  215:
        1:  216:    preG.hand[player1][0] = minion;
        1:  217:	preG.hand[player1][1] = copper;
        1:  218:	preG.hand[player1][2] = tribute;
        1:  219:	preG.hand[player1][3] = estate;
        1:  220:	preG.hand[player1][4] = mine;
        1:  221:    preG.discard[player1][0] = mine;
        -:  222:
        1:  223:    preG.discard[player2][0] = copper;
        1:  224:    preG.discard[player2][1] = estate;
        1:  225:    preG.discard[player2][2] = estate;
        1:  226:    preG.discard[player2][3] = copper;
        1:  227:    preG.discardCount[player2] = 4;
        1:  228:    preG.deckCount[player2] = 0;
        -:  229:    //discardCard(handPos, currentPlayer, state, 0);
        -:  230:
        5:  231:    for(int i = 0; i < preG.discardCount[player2]; i++)
        -:  232:    {
        4:  233:        printf("\ndiscard Card: %d\n", preG.discard[player2][i]);
        -:  234:    }
        -:  235:
        1:  236:    cardsDiscarded = 0;
        1:  237:    buysGained = 0;
        1:  238:    coinsGained = 2;
        1:  239:    actionsGained = 0;
        1:  240:    cardsGained = 2;
        1:  241:    memcpy(&postG, &preG, sizeof(struct gameState));
        -:  242:    
        1:  243:	card_tribute(&postG, player2, tributeRevealedCards, player1);
        -:  244:
        1:  245:    printf("\nDiscard before: %d, Discard after: %d\n", preG.discardCount[player2], postG.discardCount[player2]);
        1:  246:    printf("\nDeck before: %d, Deck after: %d\n", preG.deckCount[player2], postG.deckCount[player2]);
        -:  247:
        1:  248:    ASSERT((preG.discardCount[player2] - preG.discardCount[player2]) == postG.discardCount[player2]);
        1:  249:    ASSERT((preG.deckCount[player2] + preG.discardCount[player2] - 2) == postG.deckCount[player2]);
        -:  250:
        3:  251:    for(int i = 0; i < postG.discardCount[player2]; i++)
        -:  252:    {
        2:  253:        printf("\ndiscard Card after: %d\n", postG.discard[player2][i]);
        -:  254:    }
        -:  255:
        1:  256:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  257:
        -:  258:    //ASSERT(preG.deckCount[player2] - 1 == postG.deckCount[player2]);
        -:  259:    //check player2 deck and discard piles
        -:  260:
        1:  261:        printf("\n\n---------------------------------End Testing Tribute--------------------------\n\n");
        -:  262:
        1:  263:    return 0;
        -:  264:}
