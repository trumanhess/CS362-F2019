        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        -:    8:/*
        -:    9:    test 1: lose a copper, gain a silver
        -:   10:    test 2: lose a silver, try to gain a copper
        -:   11:    test 3: lose a copper, try to gain a gold
        -:   12:    test 4: lose a copper, try to gain a mine
        -:   13:    test 5: lose a estate, try to gain a mine
        -:   14:    test 6: lose a silver, try to gain a gold
        -:   15:*/
        -:   16:
        6:   17:int universalTest(struct gameState *pre, struct gameState *post, int discarded, int cardsGained, int buysGained, int coinsGained, int actionsGained, int player)
        -:   18:{
        6:   19:    printf("Number buys:\n");
        6:   20:    ASSERT((pre->numBuys + buysGained) == post->numBuys);
        6:   21:    printf("\texpected = %d, actual = %d\n", pre->numBuys + buysGained, post->numBuys);
        -:   22:
        6:   23:    printf("Number Actions:\n");
        6:   24:    ASSERT(post->numActions == pre->numActions + actionsGained);
        6:   25:    printf("\texpected = %d, actual = %d\n", pre->numActions + actionsGained, post->numActions);
        -:   26:
        6:   27:    printf("Number coins:\n");
        6:   28:    ASSERT((pre->coins + coinsGained) == post->coins);
        6:   29:    printf("\texpected = %d, actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   30:
        6:   31:    printf("Hand count:\n");
        6:   32:    ASSERT(post->handCount[player] == pre->handCount[player] - discarded + cardsGained);
        6:   33:    printf("\texpected = %d, actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        6:   34:}
        -:   35:
        1:   36:int main()
        -:   37:{
        1:   38:    int cardsGained = 0;
        1:   39:    int discarded = 0;
        1:   40:    int coinsGained = 0;
        1:   41:    int buysGained = 0;
        1:   42:    int actionsGained = 0;
        -:   43:
        1:   44:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   45:    int seed = 1000;
        1:   46:    int numPlayers = 2;
        1:   47:    int thisPlayer = 0;
        -:   48:	struct gameState preG, postG;
        1:   49:	int k[10] = {adventurer, silver, copper, gold, mine, cutpurse,
        -:   50:			sea_hag, baron, smithy, council_room};
        -:   51:
        1:   52:    printf("\n\n--------------------Testing Mine----------------------\n\n");
        -:   53:
        1:   54:    initializeGame(numPlayers, k, seed, &preG);
        -:   55:/* test 1: lose a copper, gain a silver */
        -:   56:
        1:   57:    printf("\n\nTest 1:\n");
        -:   58:    //cardsGained = 1;
        -:   59:    //cardsDiscarded = 1;
        -:   60:    //coinsGained = 3;//(?)
        -:   61:    //set players hand
        1:   62:    preG.hand[thisPlayer][0] = steward;
        1:   63:	preG.hand[thisPlayer][1] = copper;
        1:   64:	preG.hand[thisPlayer][2] = duchy;
        1:   65:	preG.hand[thisPlayer][3] = estate;
        1:   66:	preG.hand[thisPlayer][4] = mine;
        1:   67:    updateCoins(thisPlayer, &preG, 4);
        -:   68:
        1:   69:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   70:	choice1 = 1;
        1:   71:    choice2 = 5;
        1:   72:    discarded = 1;
        1:   73:    buysGained = 0;
        1:   74:    coinsGained = 2;
        1:   75:    actionsGained = 0;
        1:   76:    cardsGained = 1;
        1:   77:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:   78:    //updateCoins(thisPlayer, &postG, 4); //need to update coins to be accurate
        -:   79:
        -:   80:    /*ASSERT(preG.handCount[thisPlayer] + cardsGained - cardsDiscarded == postG.handCount[thisPlayer]);
        -:   81:    //ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        -:   82:    ASSERT(preG.coins + coinsGained == postG.coins);*/
        1:   83:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:   84:
        -:   85:/* 
        -:   86:    test 2: lose a silver, try to gain a copper 
        -:   87:    no change expected
        -:   88:*/
        -:   89:
        1:   90:    printf("\n\nTest 2:\n");
        -:   91:
        -:   92:    //cardsGained = 0;
        -:   93:    //cardsDiscarded = 0;
        -:   94:    //coinsGained = 0;
        -:   95:    //set players hand
        1:   96:    preG.hand[thisPlayer][0] = steward;
        1:   97:	preG.hand[thisPlayer][1] = silver;
        1:   98:	preG.hand[thisPlayer][2] = duchy;
        1:   99:	preG.hand[thisPlayer][3] = estate;
        1:  100:	preG.hand[thisPlayer][4] = mine;
        1:  101:    preG.handCount[thisPlayer] = 5;
        1:  102:    updateCoins(thisPlayer, &preG, 4);
        -:  103:
        1:  104:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  105:	choice1 = 1;
        1:  106:    choice2 = 4;
        1:  107:    discarded = 0;
        1:  108:    buysGained = 0;
        1:  109:    coinsGained = 0;
        1:  110:    actionsGained = 0;
        1:  111:    cardsGained = 0;
        1:  112:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  113:    //updateCoins(thisPlayer, &postG, 4);
        -:  114:
        1:  115:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  116:    /*ASSERT(preG.handCount[thisPlayer] + cardsGained  == postG.handCount[thisPlayer]);
        -:  117:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        -:  118:    ASSERT(preG.coins + coinsGained == postG.coins);*/
        -:  119:
        -:  120:
        -:  121:/* 
        -:  122:    test 3: lose a copper, try to gain a gold 
        -:  123:    no change expected
        -:  124:*/
        1:  125:    printf("\n\nTest 3:\n");
        -:  126:
        -:  127:    //cardsGained = 0;
        -:  128:    //cardsDiscarded = 0;
        -:  129:    //coinsGained = 0;
        -:  130:    //set players hand
        1:  131:    preG.hand[thisPlayer][0] = steward;
        1:  132:	preG.hand[thisPlayer][1] = copper;
        1:  133:	preG.hand[thisPlayer][2] = duchy;
        1:  134:	preG.hand[thisPlayer][3] = estate;
        1:  135:	preG.hand[thisPlayer][4] = mine;
        1:  136:    updateCoins(thisPlayer, &preG, 4);
        -:  137:
        1:  138:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  139:	choice1 = 1;
        1:  140:    choice2 = 6;
        1:  141:    discarded = 0;
        1:  142:    buysGained = 0;
        1:  143:    coinsGained = 0;
        1:  144:    actionsGained = 0;
        1:  145:    cardsGained = 0;
        1:  146:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  147:    //updateCoins(thisPlayer, &postG, 4);
        -:  148:
        1:  149:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  150:    /*ASSERT(preG.handCount[thisPlayer] + cardsGained  == postG.handCount[thisPlayer]);
        -:  151:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        -:  152:    ASSERT(preG.coins + coinsGained == postG.coins);*/
        -:  153:
        -:  154:/* 
        -:  155:    test 4: lose a copper, try to gain a mine
        -:  156:    no change expected
        -:  157:*/
        -:  158:
        1:  159:    printf("\n\nTest 4:\n");
        -:  160:    //set players hand
        1:  161:    preG.hand[thisPlayer][0] = steward;
        1:  162:	preG.hand[thisPlayer][1] = copper;
        1:  163:	preG.hand[thisPlayer][2] = duchy;
        1:  164:	preG.hand[thisPlayer][3] = estate;
        1:  165:	preG.hand[thisPlayer][4] = mine;
        1:  166:    updateCoins(thisPlayer, &preG, 4);
        -:  167:
        1:  168:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  169:	choice1 = 1;
        1:  170:    choice2 = 11;
        1:  171:    discarded = 0;
        1:  172:    buysGained = 0;
        1:  173:    coinsGained = 0;
        1:  174:    actionsGained = 0;
        1:  175:    cardsGained = 0;
        1:  176:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  177:    //updateCoins(thisPlayer, &postG, 4);
        -:  178:
        1:  179:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  180:    /*
        -:  181:    ASSERT(preG.handCount[thisPlayer] + cardsGained  == postG.handCount[thisPlayer]);
        -:  182:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        -:  183:    ASSERT(preG.coins + coinsGained == postG.coins);*/
        -:  184:
        -:  185:/* 
        -:  186:    test 5: lose a estate, try to gain a mine
        -:  187:    no change expected
        -:  188:*/
        -:  189:
        1:  190:    printf("\n\nTest 5:\n");
        -:  191:    //set players hand
        1:  192:    preG.hand[thisPlayer][0] = steward;
        1:  193:	preG.hand[thisPlayer][1] = copper;
        1:  194:	preG.hand[thisPlayer][2] = duchy;
        1:  195:	preG.hand[thisPlayer][3] = estate;
        1:  196:	preG.hand[thisPlayer][4] = copper;
        1:  197:    updateCoins(thisPlayer, &preG, 4);
        -:  198:
        1:  199:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  200:	choice1 = 3;
        1:  201:    choice2 = 11;
        1:  202:    discarded = 0;
        1:  203:    buysGained = 0;
        1:  204:    coinsGained = 0;
        1:  205:    actionsGained = 0;
        1:  206:    cardsGained = 0;
        1:  207:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  208:
        1:  209:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  210:
        5:  211:    for(int i = 0; i < postG.handCount[thisPlayer]; i++)
        -:  212:    {
        4:  213:        ASSERT(postG.hand[thisPlayer][i] != estate);
        4:  214:        if(postG.hand[thisPlayer][i] == estate)
        -:  215:        {
        1:  216:            printf("estate found in hand at position: %d\n", i);
        -:  217:        }
        -:  218:        
        -:  219:    }
        -:  220:
        -:  221:/*
        -:  222:    test 6:
        -:  223:*/
        1:  224:    printf("\n\nTest 6:\n");
        1:  225:    preG.hand[thisPlayer][0] = steward;
        1:  226:	preG.hand[thisPlayer][1] = silver;
        1:  227:	preG.hand[thisPlayer][2] = duchy;
        1:  228:	preG.hand[thisPlayer][3] = estate;
        1:  229:	preG.hand[thisPlayer][4] = mine;
        1:  230:    updateCoins(thisPlayer, &preG, 4);
        -:  231:
        1:  232:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  233:	choice1 = 1;
        1:  234:    choice2 = 6;
        1:  235:    discarded = 1;
        1:  236:    buysGained = 0;
        1:  237:    coinsGained = 2;
        1:  238:    actionsGained = 0;
        1:  239:    cardsGained = 1;
        1:  240:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  241:    //updateCoins(thisPlayer, &postG, 4); //need to update coins to be accurate
        -:  242:
        1:  243:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  244:
        1:  245:    printf("\n\n-----------------------------------End Testing Mine--------------------------------\n\n");
        -:  246:
        1:  247:    return 0;
        -:  248:}
