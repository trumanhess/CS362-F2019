        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        -:    8:/*
        -:    9:    test 1: lose a copper, gain a silver
        -:   10:    test 2: lose a silver, try to gain a copper
        -:   11:    test 3: lose a copper, try to gain a gold
        -:   12:    test 4: lose a copper, try to gain a mine
        -:   13:    test 5: lose a estate, try to gain a mine
        -:   14:    test 6: lose a silver, gain a gold
        -:   15:*/
        -:   16:
        1:   17:int main()
        -:   18:{
        1:   19:    int cardsGained = 0;
        1:   20:    int cardsDiscarded = 1;
        1:   21:    int coinsGained = 0;
        1:   22:    int shuffledCards = 0;
        -:   23:
        -:   24:    int i, j, m;
        1:   25:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   26:    int remove1, remove2;
        1:   27:    int seed = 1000;
        1:   28:    int numPlayers = 2;
        1:   29:    int thisPlayer = 0;
        -:   30:	struct gameState preG, postG;
        1:   31:	int k[10] = {adventurer, silver, copper, gold, mine, cutpurse,
        -:   32:			sea_hag, baron, smithy, council_room};
        -:   33:
        -:   34://REPLACE ALL //assertS WITH OWN IMPLEMENTATION
        1:   35:    initializeGame(numPlayers, k, seed, &postG);
        -:   36:/* test 1: lose a copper, gain a silver */
        -:   37:
        1:   38:    cardsGained = 1;
        1:   39:    cardsDiscarded = 1;
        1:   40:    coinsGained = 3;//(?)
        -:   41:    //set players hand
        1:   42:    postG.hand[thisPlayer][0] = steward;
        1:   43:	postG.hand[thisPlayer][1] = copper;
        1:   44:	postG.hand[thisPlayer][2] = duchy;
        1:   45:	postG.hand[thisPlayer][3] = estate;
        1:   46:	postG.hand[thisPlayer][4] = mine;
        -:   47:
        1:   48:    memcpy(&preG, &postG, sizeof(struct gameState));
        1:   49:	choice1 = 1;//or is it 2?
        1:   50:    choice2 = 1;//or is it 2?
        1:   51:	cardEffect(mine, choice1, choice2, choice3, &postG, handpos, &bonus);
        -:   52:
        1:   53:    ASSERT(preG.handCount[thisPlayer] + cardsGained - cardsDiscarded == postG.handCount[thisPlayer]);
        1:   54:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        1:   55:    ASSERT(preG.coins + coinsGained == postG.coins);
        -:   56:
        -:   57:/* 
        -:   58:    test 2: lose a silver, try to gain a copper 
        -:   59:    no change expected
        -:   60:*/
        -:   61:
        1:   62:    cardsGained = 0;
        1:   63:    cardsDiscarded = 0;
        1:   64:    coinsGained = 0;
        -:   65:    //set players hand
        1:   66:    postG.hand[thisPlayer][0] = steward;
        1:   67:	postG.hand[thisPlayer][1] = silver;
        1:   68:	postG.hand[thisPlayer][2] = duchy;
        1:   69:	postG.hand[thisPlayer][3] = estate;
        1:   70:	postG.hand[thisPlayer][4] = mine;
        -:   71:
        1:   72:    memcpy(&preG, &postG, sizeof(struct gameState));
        1:   73:	choice1 = 1;//or is it 2?
        1:   74:    choice2 = 2;//or is it 3?
        1:   75:	cardEffect(mine, choice1, choice2, choice3, &postG, handpos, &bonus);
        -:   76:
        1:   77:    ASSERT(preG.handCount[thisPlayer] + cardsGained - cardsDiscarded == postG.handCount[thisPlayer]);
        1:   78:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        1:   79:    ASSERT(preG.coins + coinsGained == postG.coins);
        -:   80:
        -:   81:/* 
        -:   82:    test 3: lose a copper, try to gain a gold 
        -:   83:    no change expected
        -:   84:*/
        1:   85:    cardsGained = 0;
        1:   86:    cardsDiscarded = 0;
        1:   87:    coinsGained = 0;
        -:   88:    //set players hand
        1:   89:    postG.hand[thisPlayer][0] = steward;
        1:   90:	postG.hand[thisPlayer][1] = copper;
        1:   91:	postG.hand[thisPlayer][2] = duchy;
        1:   92:	postG.hand[thisPlayer][3] = estate;
        1:   93:	postG.hand[thisPlayer][4] = mine;
        -:   94:
        1:   95:    memcpy(&preG, &postG, sizeof(struct gameState));
        1:   96:	choice1 = 1;//or is it 2?
        1:   97:    choice2 = 3;//or is it 4?
        1:   98:	cardEffect(mine, choice1, choice2, choice3, &postG, handpos, &bonus);
        -:   99:
        1:  100:    ASSERT(preG.handCount[thisPlayer] + cardsGained - cardsDiscarded == postG.handCount[thisPlayer]);
        1:  101:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        1:  102:    ASSERT(preG.coins + coinsGained == postG.coins);
        -:  103:
        -:  104:/* 
        -:  105:    test 4: lose a copper, try to gain a mine
        -:  106:    no change expected
        -:  107:*/
        1:  108:    cardsGained = 0;
        1:  109:    cardsDiscarded = 0;
        1:  110:    coinsGained = 0;
        -:  111:    //set players hand
        1:  112:    postG.hand[thisPlayer][0] = steward;
        1:  113:	postG.hand[thisPlayer][1] = copper;
        1:  114:	postG.hand[thisPlayer][2] = duchy;
        1:  115:	postG.hand[thisPlayer][3] = estate;
        1:  116:	postG.hand[thisPlayer][4] = mine;
        -:  117:
        1:  118:    memcpy(&preG, &postG, sizeof(struct gameState));
        1:  119:	choice1 = 1;//or is it 2?
        1:  120:    choice2 = 4;//or is it 5?
        1:  121:	cardEffect(mine, choice1, choice2, choice3, &postG, handpos, &bonus);
        -:  122:
        1:  123:    ASSERT(preG.handCount[thisPlayer] + cardsGained - cardsDiscarded == postG.handCount[thisPlayer]);
        1:  124:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        1:  125:    ASSERT(preG.coins + coinsGained == postG.coins);
        -:  126:
        -:  127:/* 
        -:  128:    test 5: lose a estate, try to gain a mine
        -:  129:    no change expected
        -:  130:*/
        1:  131:    cardsGained = 0;
        1:  132:    cardsDiscarded = 0;
        1:  133:    coinsGained = 0;
        -:  134:    //set players hand
        1:  135:    postG.hand[thisPlayer][0] = steward;
        1:  136:	postG.hand[thisPlayer][1] = copper;
        1:  137:	postG.hand[thisPlayer][2] = duchy;
        1:  138:	postG.hand[thisPlayer][3] = estate;
        1:  139:	postG.hand[thisPlayer][4] = mine;
        -:  140:
        1:  141:    memcpy(&preG, &postG, sizeof(struct gameState));
        1:  142:	choice1 = 3;//or is it 4?
        1:  143:    choice2 = 4;//or is it 5?
        1:  144:	cardEffect(mine, choice1, choice2, choice3, &postG, handpos, &bonus);
        -:  145:
        1:  146:    ASSERT(preG.handCount[thisPlayer] + cardsGained - cardsDiscarded == postG.handCount[thisPlayer]);
        1:  147:    ASSERT(preG.deckCount[thisPlayer] - cardsGained == postG.deckCount[thisPlayer]);
        1:  148:    ASSERT(preG.coins + coinsGained == postG.coins);
        -:  149:
        1:  150:    return 0;
        -:  151:}
