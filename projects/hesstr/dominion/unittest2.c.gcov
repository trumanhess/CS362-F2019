        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        -:    8:/*
        -:    9:    test 1: lose a copper, gain a silver
        -:   10:    test 2: lose a silver, try to gain a copper
        -:   11:    test 3: lose a copper, try to gain a gold
        -:   12:    test 4: lose a copper, try to gain a mine
        -:   13:    test 5: lose a estate, try to gain a mine
        -:   14:    test 6: lose a silver, try to gain a gold
        -:   15:*/
        -:   16:
        6:   17:int universalTest(struct gameState *pre, struct gameState *post, int discarded, int cardsGained, int buysGained, int coinsGained, int actionsGained, int player)
        -:   18:{
        6:   19:    printf("Number buys:\n");
        6:   20:    ASSERT((pre->numBuys + buysGained) == post->numBuys);
        6:   21:    printf("\texpected = %d, actual = %d\n", pre->numBuys + buysGained, post->numBuys);
        -:   22:
        6:   23:    printf("Number Actions:\n");
        6:   24:    ASSERT(post->numActions == pre->numActions + actionsGained);
        6:   25:    printf("\texpected = %d, actual = %d\n", pre->numActions + actionsGained, post->numActions);
        -:   26:
        6:   27:    printf("Number coins:\n");
        6:   28:    ASSERT((pre->coins + coinsGained) == post->coins);
        6:   29:    printf("\texpected = %d, actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   30:
        6:   31:    printf("Hand count:\n");
        6:   32:    ASSERT(post->handCount[player] == pre->handCount[player] - discarded + cardsGained);
        6:   33:    printf("\texpected = %d, actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        -:   34:
        6:   35:    return 0;
        -:   36:}
        -:   37:
        1:   38:int main()
        -:   39:{
        1:   40:    int cardsGained = 0;
        1:   41:    int discarded = 0;
        1:   42:    int coinsGained = 0;
        1:   43:    int buysGained = 0;
        1:   44:    int actionsGained = 0;
        -:   45:
        1:   46:    int handpos = 0, choice1 = 0, choice2 = 0;
        1:   47:    int seed = 1000;
        1:   48:    int numPlayers = 2;
        1:   49:    int thisPlayer = 0;
        -:   50:	struct gameState preG, postG;
        1:   51:	int k[10] = {adventurer, silver, copper, gold, mine, cutpurse,
        -:   52:			sea_hag, baron, smithy, council_room};
        -:   53:
        1:   54:    printf("\n\n--------------------Testing Mine----------------------\n\n");
        -:   55:
        1:   56:    initializeGame(numPlayers, k, seed, &preG);
        -:   57:/* test 1: lose a copper, gain a silver */
        -:   58:
        1:   59:    printf("\n\nTest 1:\n");
        -:   60:
        1:   61:    preG.hand[thisPlayer][0] = steward;
        1:   62:	preG.hand[thisPlayer][1] = copper;
        1:   63:	preG.hand[thisPlayer][2] = duchy;
        1:   64:	preG.hand[thisPlayer][3] = estate;
        1:   65:	preG.hand[thisPlayer][4] = mine;
        1:   66:    updateCoins(thisPlayer, &preG, 4);
        -:   67:
        1:   68:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   69:	choice1 = 1;
        1:   70:    choice2 = 5;
        1:   71:    discarded = 1;
        1:   72:    buysGained = 0;
        1:   73:    coinsGained = 2;
        1:   74:    actionsGained = 0;
        1:   75:    cardsGained = 1;
        1:   76:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:   77:
        1:   78:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:   79:
        -:   80:/* 
        -:   81:    test 2: lose a silver, try to gain a copper 
        -:   82:    no change expected
        -:   83:*/
        -:   84:
        1:   85:    printf("\n\nTest 2:\n");
        -:   86:
        1:   87:    preG.hand[thisPlayer][0] = steward;
        1:   88:	preG.hand[thisPlayer][1] = silver;
        1:   89:	preG.hand[thisPlayer][2] = duchy;
        1:   90:	preG.hand[thisPlayer][3] = estate;
        1:   91:	preG.hand[thisPlayer][4] = mine;
        1:   92:    preG.handCount[thisPlayer] = 5;
        1:   93:    updateCoins(thisPlayer, &preG, 4);
        -:   94:
        1:   95:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   96:	choice1 = 1;
        1:   97:    choice2 = 4;
        1:   98:    discarded = 0;
        1:   99:    buysGained = 0;
        1:  100:    coinsGained = 0;
        1:  101:    actionsGained = 0;
        1:  102:    cardsGained = 0;
        1:  103:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  104:
        1:  105:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  106:
        -:  107:/* 
        -:  108:    test 3: lose a copper, try to gain a gold 
        -:  109:    no change expected
        -:  110:*/
        1:  111:    printf("\n\nTest 3:\n");
        -:  112:
        -:  113:    //set players hand
        1:  114:    preG.hand[thisPlayer][0] = steward;
        1:  115:	preG.hand[thisPlayer][1] = copper;
        1:  116:	preG.hand[thisPlayer][2] = duchy;
        1:  117:	preG.hand[thisPlayer][3] = estate;
        1:  118:	preG.hand[thisPlayer][4] = mine;
        1:  119:    updateCoins(thisPlayer, &preG, 4);
        -:  120:
        1:  121:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  122:	choice1 = 1;
        1:  123:    choice2 = 6;
        1:  124:    discarded = 0;
        1:  125:    buysGained = 0;
        1:  126:    coinsGained = 0;
        1:  127:    actionsGained = 0;
        1:  128:    cardsGained = 0;
        1:  129:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  130:
        1:  131:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  132:
        -:  133:/* 
        -:  134:    test 4: lose a copper, try to gain a mine
        -:  135:    no change expected
        -:  136:*/
        -:  137:
        1:  138:    printf("\n\nTest 4:\n");
        -:  139:
        -:  140:    //set players hand
        1:  141:    preG.hand[thisPlayer][0] = steward;
        1:  142:	preG.hand[thisPlayer][1] = copper;
        1:  143:	preG.hand[thisPlayer][2] = duchy;
        1:  144:	preG.hand[thisPlayer][3] = estate;
        1:  145:	preG.hand[thisPlayer][4] = mine;
        1:  146:    updateCoins(thisPlayer, &preG, 4);
        -:  147:
        1:  148:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  149:	choice1 = 1;
        1:  150:    choice2 = 11;
        1:  151:    discarded = 0;
        1:  152:    buysGained = 0;
        1:  153:    coinsGained = 0;
        1:  154:    actionsGained = 0;
        1:  155:    cardsGained = 0;
        1:  156:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  157:
        1:  158:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  159:
        -:  160:/* 
        -:  161:    test 5: lose a estate, try to gain a mine
        -:  162:    no change expected
        -:  163:*/
        -:  164:
        1:  165:    printf("\n\nTest 5:\n");
        -:  166:
        -:  167:    //set players hand
        1:  168:    preG.hand[thisPlayer][0] = steward;
        1:  169:	preG.hand[thisPlayer][1] = copper;
        1:  170:	preG.hand[thisPlayer][2] = duchy;
        1:  171:	preG.hand[thisPlayer][3] = estate;
        1:  172:	preG.hand[thisPlayer][4] = copper;
        1:  173:    updateCoins(thisPlayer, &preG, 4);
        -:  174:
        1:  175:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  176:	choice1 = 3;
        1:  177:    choice2 = 11;
        1:  178:    discarded = 0;
        1:  179:    buysGained = 0;
        1:  180:    coinsGained = 0;
        1:  181:    actionsGained = 0;
        1:  182:    cardsGained = 0;
        1:  183:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  184:
        1:  185:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  186:
        5:  187:    for(int i = 0; i < postG.handCount[thisPlayer]; i++)
        -:  188:    {
        4:  189:        ASSERT(postG.hand[thisPlayer][i] != estate);
        4:  190:        if(postG.hand[thisPlayer][i] == estate)
        -:  191:        {
        1:  192:            printf("estate found in hand at position: %d\n", i);
        -:  193:        }
        -:  194:        
        -:  195:    }
        -:  196:
        -:  197:/*
        -:  198:    test 6: lose a silver, try to gain a gold
        -:  199:    expect: to gain +2 coins
        -:  200:*/
        1:  201:    printf("\n\nTest 6:\n");
        1:  202:    preG.hand[thisPlayer][0] = steward;
        1:  203:	preG.hand[thisPlayer][1] = silver;
        1:  204:	preG.hand[thisPlayer][2] = duchy;
        1:  205:	preG.hand[thisPlayer][3] = estate;
        1:  206:	preG.hand[thisPlayer][4] = mine;
        1:  207:    updateCoins(thisPlayer, &preG, 4);
        -:  208:
        1:  209:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  210:	choice1 = 1;
        1:  211:    choice2 = 6;
        1:  212:    discarded = 1;
        1:  213:    buysGained = 0;
        1:  214:    coinsGained = 2;
        1:  215:    actionsGained = 0;
        1:  216:    cardsGained = 1;
        1:  217:	mineLogic(choice1, choice2, &postG, handpos, thisPlayer);
        -:  218:
        1:  219:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  220:
        1:  221:    printf("\n\n-----------------------------------End Testing Mine--------------------------------\n\n");
        -:  222:
        1:  223:    return 0;
        -:  224:}
