        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 140 returned 100% blocks executed 83%
      140:    8:int compare(const void* a, const void* b) {
      140:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
      140:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       50:   12:        return -1;
       90:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 83%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
        5:   44:    SelectStream(1);
call    0 returned 100%
        5:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
        5:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        5:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       55:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        5:   73:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        5:   87:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:        state->supplyCount[estate] = 8;
        5:   90:        state->supplyCount[duchy] = 8;
        5:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        5:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:    state->supplyCount[silver] = 40;
        5:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      105:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      913:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  109:        {
      852:  110:            if (kingdomCards[j] == i)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       39:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:                {
    #####:  115:                    if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
    #####:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
       39:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
       39:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
      813:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
       15:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  141:    {
       10:  142:        state->deckCount[i] = 0;
       40:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
       30:  145:            state->deck[i][j] = estate;
       30:  146:            state->deckCount[i]++;
        -:  147:        }
       80:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
       70:  150:            state->deck[i][j] = copper;
       70:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
       15:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  157:    {
       10:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
       15:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
       10:  168:        state->handCount[i] = 0;
       10:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      140:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
      135:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
        5:  184:    state->outpostPlayed = 0;
        5:  185:    state->phase = 0;
        5:  186:    state->numActions = 1;
        5:  187:    state->numBuys = 1;
        5:  188:    state->playedCardCount = 0;
        5:  189:    state->whoseTurn = 0;
        5:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
       30:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
        5:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
        5:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 10 returned 100% blocks executed 94%
       10:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
       10:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
       10:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:        return -1;
       10:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      120:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      100:  218:        newDeck[newDeckPos] = state->deck[player][card];
      100:  219:        newDeckPos++;
      350:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      250:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
      100:  223:        state->deckCount[player]--;
        -:  224:    }
      110:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  226:        state->deck[player][i] = newDeck[i];
      100:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
       10:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:    return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 11 returned 100% blocks executed 100%
       11:  322:int supplyCount(int card, struct gameState *state) {
       11:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  348:int whoseTurn(struct gameState *state) {
    #####:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 43 returned 100% blocks executed 38%
       43:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
       43:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
       43:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       43:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
       43:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       43:  614:        state->deckCount[player]--;
       43:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
       43:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 8 returned 100% blocks executed 23%
        8:  621:int getCost(int cardNumber)
        -:  622:{
        8:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 13%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 38%
branch  5 taken 13%
branch  6 taken 13%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 25%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
    #####:  625:    case curse:
    #####:  626:        return 0;
        1:  627:    case estate:
        1:  628:        return 2;
    #####:  629:    case duchy:
    #####:  630:        return 5;
    #####:  631:    case province:
    #####:  632:        return 8;
        3:  633:    case copper:
        3:  634:        return 0;
        1:  635:    case silver:
        1:  636:        return 3;
        1:  637:    case gold:
        1:  638:        return 6;
    #####:  639:    case adventurer:
    #####:  640:        return 6;
    #####:  641:    case council_room:
    #####:  642:        return 5;
    #####:  643:    case feast:
    #####:  644:        return 4;
    #####:  645:    case gardens:
    #####:  646:        return 4;
        2:  647:    case mine:
        2:  648:        return 5;
    #####:  649:    case remodel:
    #####:  650:        return 4;
    #####:  651:    case smithy:
    #####:  652:        return 4;
    #####:  653:    case village:
    #####:  654:        return 3;
    #####:  655:    case baron:
    #####:  656:        return 4;
    #####:  657:    case great_hall:
    #####:  658:        return 3;
    #####:  659:    case minion:
    #####:  660:        return 5;
    #####:  661:    case steward:
    #####:  662:        return 3;
    #####:  663:    case tribute:
    #####:  664:        return 5;
    #####:  665:    case ambassador:
    #####:  666:        return 3;
    #####:  667:    case cutpurse:
    #####:  668:        return 4;
    #####:  669:    case embargo:
    #####:  670:        return 2;
    #####:  671:    case outpost:
    #####:  672:        return 5;
    #####:  673:    case salvager:
    #####:  674:        return 4;
    #####:  675:    case sea_hag:
    #####:  676:        return 4;
    #####:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
        -:  684://will find the card you give it and return the position in the hand the card was found, otherwise a -1
function findCardInHand called 8 returned 100% blocks executed 100%
        8:  685:int findCardInHand(int cardToFind, struct gameState *state, int curPlayer)
        -:  686:{
       22:  687:    for(int i = 0; i < state->handCount[curPlayer]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  688:    {
       20:  689:        if(state->hand[curPlayer][i] == cardToFind)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:  690:        {
        6:  691:            return i;
        -:  692:        }
        -:  693:    }
        2:  694:    return -1;
        -:  695:}
        -:  696:
function baronLogic called 4 returned 100% blocks executed 93%
        4:  697:int baronLogic(int choice1, struct gameState *state, int currentPlayer)
        -:  698:{
        4:  699:    state->numBuys++;//Increase buys by 1!
        4:  700:    int cardPos = 0;
        -:  701:
        4:  702:    cardPos = findCardInHand(estate, state, currentPlayer);
call    0 returned 100%
        -:  703:
        -:  704:    //if the player wants to get rid of estate and there is one found in the deck
        4:  705:    if(choice1 && cardPos == -1) //bug here! supposed to be "!= -1"
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:  706:    {
        1:  707:        state->coins += 4;//Add 4 coins to the amount of coins
        1:  708:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][cardPos];
        1:  709:        state->discardCount[currentPlayer]++;
        6:  710:        for (; cardPos < state->handCount[currentPlayer]; cardPos++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  711:        {
        5:  712:            state->hand[currentPlayer][cardPos] = state->hand[currentPlayer][cardPos+1];
        -:  713:        }
        1:  714:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  715:        state->handCount[currentPlayer]--;
        -:  716:    }
        -:  717:    //an estate must be given otherwise
        -:  718:    else
        -:  719:    {
        3:  720:        if (supplyCount(estate, state) < 0) //bug here! supposed to be "> 0" 
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  721:        {
        1:  722:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -:  723:
        1:  724:            state->supplyCount[estate]--;//Decrement Estates
        1:  725:            if (supplyCount(estate, state) == 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  726:            {
    #####:  727:                isGameOver(state);
call    0 never executed
        -:  728:            }
        -:  729:        }
        -:  730:    }
        -:  731:    
        4:  732:    return 0;
        -:  733:}
        -:  734:
function mineLogic called 6 returned 100% blocks executed 88%
        6:  735:int mineLogic(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -:  736:{
        6:  737:    int cardPos = 0;
        6:  738:    int goldToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  739:
        -:  740:    //if the player did not choose a treasure card then return an error
        6:  741:    if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] > gold) //bug here, < copper
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  742:    {
        2:  743:        return -1;
        -:  744:    }
        -:  745:
        4:  746:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  747:    {
    #####:  748:        return -1;
        -:  749:    }
        -:  750:
        -:  751:    //if the player attemtps to choose a treasure that costs less than the original card return an error
        4:  752:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  753:    {
    #####:  754:        return -1;
        -:  755:    }
        -:  756:
        -:  757:    //gain new treasure
        4:  758:    gainCard(goldToTrash, state, 2, currentPlayer); //bug here supposed to be choice2 in the first spot
call    0 returned 100%
        -:  759:
        -:  760:    //discard mine from hand (?)
        4:  761:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  762:
        -:  763:    //trash coin that was replaced
        4:  764:    cardPos = findCardInHand(goldToTrash, state, currentPlayer);
call    0 returned 100%
        4:  765:    if(cardPos != -1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  766:    {
        4:  767:        discardCard(cardPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  768:    }
        -:  769:
        4:  770:    return 0;
        -:  771:}
        -:  772:
function minionLogic called 3 returned 100% blocks executed 94%
        3:  773:int minionLogic(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -:  774:{
        -:  775:    //+1 action
        3:  776:    state->numActions++;
        -:  777:
        -:  778:    //discard card from hand
        3:  779:    discardCard(handPos, currentPlayer, state, 0); 
call    0 returned 100%
        -:  780:
        3:  781:    if (choice1 == 2) //bug here! choice1 supposed to be 1 here not 2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  782:    {
        2:  783:        state->coins = state->coins + 2;
        -:  784:    }
        1:  785:    else if (choice1 == 1) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  786:    {
        -:  787:        //other players discard hand and redraw if hand size > 4
        3:  788:        for(int i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  789:        {
        -:  790:            //if a player has a hand greater than four or if they are the player that played the card
        -:  791:            //they must discard their deck and get four new cards
        2:  792:            if(state->handCount[i] > 4 || i == currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  793:            {
        -:  794:                //discard hand
        4:  795:                while(state->handCount[i] < 0) //bug here! should be "> 0" not "< 0"
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  796:                {
    #####:  797:                    discardCard(handPos, i, state, 0);
call    0 never executed
        -:  798:                }
        -:  799:
        -:  800:                //draw 4
       10:  801:                for (int j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  802:                {
        8:  803:                    drawCard(i, state);
call    0 returned 100%
        -:  804:                }
        -:  805:            }
        -:  806:        }
        -:  807:    }
        3:  808:    return 0;
        -:  809:}
        -:  810:
function tributeLogic called 5 returned 100% blocks executed 83%
        5:  811:int tributeLogic(struct gameState *state, int currentPlayer, int nextPlayer)
        -:  812:{
        5:  813:    int tributeRevealedCards[2] = {99999, 99999}; //bug here, should be -1 and -1, not 0 0
        -:  814:
        -:  815:    //if the next player has less than or equal to one card in both their discard pile and deck then do this
        5:  816:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) 
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  817:    {
        3:  818:        if (state->deckCount[nextPlayer] > 0) //if the card is in their deck
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  819:        {
        2:  820:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2:  821:            state->deckCount[nextPlayer]--;
        -:  822:        }
        1:  823:        else if (state->discardCount[nextPlayer] > 0) //if the card is in their discard pile
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  824:        {
    #####:  825:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  826:            state->discardCount[nextPlayer]--;
        -:  827:        }
        -:  828:        else 
        -:  829:        {
        -:  830:            //No Card to Reveal
        -:  831:            if (DEBUG) 
        -:  832:            {
        -:  833:                printf("No cards to reveal\n");
        -:  834:            }
        -:  835:        }
        -:  836:    }
        -:  837:    else 
        -:  838:    {
        2:  839:        if (state->deckCount[nextPlayer] == 0) //if the player has no cards in his deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  840:        {
    #####:  841:            for (int i = 0; i < state->discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  842:            {
    #####:  843:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  844:                state->deckCount[nextPlayer]++;
    #####:  845:                state->discard[nextPlayer][i] = -1;
    #####:  846:                state->discardCount[nextPlayer]--;
        -:  847:            }
        -:  848:
    #####:  849:            shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  850:        }
        2:  851:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2:  852:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2:  853:        state->deckCount[nextPlayer]--;
        2:  854:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; //bug here! should be 1, not 0
        2:  855:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2:  856:        state->deckCount[nextPlayer]--;
        -:  857:    }
        -:  858:
        5:  859:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  860:    { //If we have a duplicate card, just drop one
        1:  861:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        1:  862:        state->playedCardCount++;
        1:  863:        tributeRevealedCards[1] = -1;
        -:  864:    }
        -:  865:
       20:  866:    for (int i = 0; i <= 2; i++) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  867:    {
       15:  868:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  869:        { //Treasure cards
        2:  870:            state->coins += 2;
        -:  871:        }
        -:  872:
       13:  873:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 62% (fallthrough)
branch  3 taken 38%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -:  874:        { //Victory Card Found
        5:  875:            drawCard(currentPlayer, state);
call    0 returned 100%
        5:  876:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  877:        }
        -:  878:        else 
        -:  879:        { //Action Card
        8:  880:            state->numActions = state->numActions + 2;
        -:  881:        }
        -:  882:    }
        -:  883:
        5:  884:    return 0;
        -:  885:}
        -:  886:
function ambassadorLogic called 7 returned 100% blocks executed 75%
        7:  887:int ambassadorLogic(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -:  888:{
        7:  889:    int cardPos = 0;
        7:  890:    int j = 0;		//used to check if player has enough cards to discard
        -:  891:
        7:  892:    if (choice2 > 2 || choice2 < 0) //if the player picked too many or too few cards then return an error
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  893:    {
        1:  894:        return -1;
        -:  895:    }
        -:  896:
        6:  897:    if (choice1 == handPos) //can't choose to give people ambassador
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  898:    {
    #####:  899:        return -1;
        -:  900:    }
        -:  901:
        -:  902:    //used to count how many cards the player has to give away
       36:  903:    for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  904:    {
       30:  905:        if (i == handPos && i == state->hand[currentPlayer][choice1] && i == choice1) //bug here should be "i != handPos" and "i != choice1"
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -:  906:        {
    #####:  907:            j++;
        -:  908:        }
        -:  909:    }
        -:  910:    //if the player has less cards then they said they wanted to give away, return -1
        6:  911:    if (j < choice2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  912:    {
        4:  913:        return -1;
        -:  914:    }
        -:  915:
        -:  916:    if (DEBUG)
        -:  917:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  918:
        -:  919:    //increase supply count for choosen card by amount being discarded
        2:  920:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  921:
        -:  922:    //each other player gains a copy of revealed card
        6:  923:    for (int i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  924:    {
        4:  925:        if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  926:        {
        2:  927:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        -:  928:        }
        -:  929:    }
        -:  930:
        -:  931:    //discard played card from hand
        2:  932:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  933:
        -:  934:    //trash copies of cards returned to supply
        2:  935:    for (int i = 0; i < choice2; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  936:    {
    #####:  937:        cardPos = findCardInHand(i, state, currentPlayer); //bug here, should be choice1, not i
call    0 never executed
    #####:  938:        if(cardPos != -1)
branch  0 never executed
branch  1 never executed
        -:  939:        {
    #####:  940:            discardCard(cardPos, currentPlayer, state, 1);
call    0 never executed
        -:  941:        }
        -:  942:    }
        -:  943:
        2:  944:    return 0;
        -:  945:
        -:  946:}
        -:  947:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  948:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  949:{
        -:  950:    int i;
        -:  951:    int j;
        -:  952:    int k;
        -:  953:    int x;
        -:  954:    int index;
    #####:  955:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  956:    int nextPlayer = currentPlayer + 1;
        -:  957:
        -:  958:    //int tributeRevealedCards[2] = {-1, -1};
        -:  959:    int temphand[MAX_HAND];// moved above the if statement
    #####:  960:    int drawntreasure=0;
        -:  961:    int cardDrawn;
    #####:  962:    int z = 0;// this is the counter for the temp hand
    #####:  963:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  964:        nextPlayer = 0;
        -:  965:    }
        -:  966:
        -:  967:
        -:  968:    //uses switch to select card and perform actions
    #####:  969:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  970:    {
    #####:  971:    case adventurer:
    #####:  972:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  973:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  974:                shuffle(currentPlayer, state);
call    0 never executed
        -:  975:            }
    #####:  976:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  977:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  978:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  979:                drawntreasure++;
        -:  980:            else {
    #####:  981:                temphand[z]=cardDrawn;
    #####:  982:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  983:                z++;
        -:  984:            }
        -:  985:        }
    #####:  986:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  987:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  988:            z=z-1;
        -:  989:        }
    #####:  990:        return 0;
        -:  991:
    #####:  992:    case council_room:
        -:  993:        //+4 Cards
    #####:  994:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  995:        {
    #####:  996:            drawCard(currentPlayer, state);
call    0 never executed
        -:  997:        }
        -:  998:
        -:  999:        //+1 Buy
    #####: 1000:        state->numBuys++;
        -: 1001:
        -: 1002:        //Each other player draws a card
    #####: 1003:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:        {
    #####: 1005:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1006:            {
    #####: 1007:                drawCard(i, state);
call    0 never executed
        -: 1008:            }
        -: 1009:        }
        -: 1010:
        -: 1011:        //put played card in played card pile
    #####: 1012:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1013:
    #####: 1014:        return 0;
        -: 1015:
    #####: 1016:    case feast:
        -: 1017:        //gain card with cost up to 5
        -: 1018:        //Backup hand
    #####: 1019:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1020:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1021:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1022:        }
        -: 1023:        //Backup hand
        -: 1024:
        -: 1025:        //Update Coins for Buy
    #####: 1026:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1027:        x = 1;//Condition to loop on
    #####: 1028:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1029:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1030:                if (DEBUG)
        -: 1031:                    printf("None of that card left, sorry!\n");
        -: 1032:
        -: 1033:                if (DEBUG) {
        -: 1034:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1035:                }
        -: 1036:            }
    #####: 1037:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1038:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1039:
        -: 1040:                if (DEBUG) {
        -: 1041:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1042:                }
        -: 1043:            }
        -: 1044:            else {
        -: 1045:
        -: 1046:                if (DEBUG) {
        -: 1047:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1048:                }
        -: 1049:
    #####: 1050:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1051:                x = 0;//No more buying cards
        -: 1052:
        -: 1053:                if (DEBUG) {
        -: 1054:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1055:                }
        -: 1056:
        -: 1057:            }
        -: 1058:        }
        -: 1059:
        -: 1060:        //Reset Hand
    #####: 1061:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1062:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1063:            temphand[i] = -1;
        -: 1064:        }
        -: 1065:        //Reset Hand
        -: 1066:
    #####: 1067:        return 0;
        -: 1068:
    #####: 1069:    case gardens:
    #####: 1070:        return -1;
        -: 1071:
    #####: 1072:    case mine:
    #####: 1073:        mineLogic(choice1, choice2, state, handPos, currentPlayer);
call    0 never executed
        -: 1074:
    #####: 1075:    case remodel:
    #####: 1076:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1077:
    #####: 1078:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1079:        {
    #####: 1080:            return -1;
        -: 1081:        }
        -: 1082:
    #####: 1083:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1084:
        -: 1085:        //discard card from hand
    #####: 1086:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1087:
        -: 1088:        //discard trashed card
    #####: 1089:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:        {
    #####: 1091:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1092:            {
    #####: 1093:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1094:                break;
        -: 1095:            }
        -: 1096:        }
        -: 1097:
        -: 1098:
    #####: 1099:        return 0;
        -: 1100:
    #####: 1101:    case smithy:
        -: 1102:        //+3 Cards
    #####: 1103:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:        {
    #####: 1105:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1106:        }
        -: 1107:
        -: 1108:        //discard card from hand
    #####: 1109:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1110:        return 0;
        -: 1111:
    #####: 1112:    case village:
        -: 1113:        //+1 Card
    #####: 1114:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1115:
        -: 1116:        //+2 Actions
    #####: 1117:        state->numActions = state->numActions + 2;
        -: 1118:
        -: 1119:        //discard played card from hand
    #####: 1120:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1121:        return 0;
        -: 1122:
    #####: 1123:    case baron:
    #####: 1124:        baronLogic(choice1, state, currentPlayer);
call    0 never executed
        -: 1125:
    #####: 1126:    case great_hall:
        -: 1127:        //+1 Card
    #####: 1128:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1129:
        -: 1130:        //+1 Actions
    #####: 1131:        state->numActions++;
        -: 1132:
        -: 1133:        //discard card from hand
    #####: 1134:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1135:        return 0;
        -: 1136:
    #####: 1137:    case minion:
    #####: 1138:        minionLogic(choice1, choice2, state, handPos, currentPlayer);
call    0 never executed
        -: 1139:
    #####: 1140:    case steward:
    #####: 1141:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1142:        {
        -: 1143:            //+2 cards
    #####: 1144:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1145:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1146:        }
    #####: 1147:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1148:        {
        -: 1149:            //+2 coins
    #####: 1150:            state->coins = state->coins + 2;
        -: 1151:        }
        -: 1152:        else
        -: 1153:        {
        -: 1154:            //trash 2 cards in hand
    #####: 1155:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1157:        }
        -: 1158:
        -: 1159:        //discard card from hand
    #####: 1160:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1161:        return 0;
        -: 1162:
    #####: 1163:    case tribute:
    #####: 1164:        tributeLogic(state, currentPlayer, nextPlayer);
call    0 never executed
        -: 1165:
    #####: 1166:    case ambassador:
    #####: 1167:        ambassadorLogic(choice1, choice2, state, handPos, currentPlayer);
call    0 never executed
        -: 1168:
    #####: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1172:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:        {
    #####: 1174:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:            {
    #####: 1176:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:                {
    #####: 1178:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:                    {
    #####: 1180:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1181:                        break;
        -: 1182:                    }
    #####: 1183:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:                    {
    #####: 1185:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:                        {
        -: 1187:                            if (DEBUG)
        -: 1188:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:                        }
    #####: 1190:                        break;
        -: 1191:                    }
        -: 1192:                }
        -: 1193:
        -: 1194:            }
        -: 1195:
        -: 1196:        }
        -: 1197:
        -: 1198:        //discard played card from hand
    #####: 1199:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1200:
    #####: 1201:        return 0;
        -: 1202:
        -: 1203:
    #####: 1204:    case embargo:
        -: 1205:        //+2 Coins
    #####: 1206:        state->coins = state->coins + 2;
        -: 1207:
        -: 1208:        //see if selected pile is in play
    #####: 1209:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1210:        {
    #####: 1211:            return -1;
        -: 1212:        }
        -: 1213:
        -: 1214:        //add embargo token to selected supply pile
    #####: 1215:        state->embargoTokens[choice1]++;
        -: 1216:
        -: 1217:        //trash card
    #####: 1218:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1219:        return 0;
        -: 1220:
    #####: 1221:    case outpost:
        -: 1222:        //set outpost flag
    #####: 1223:        state->outpostPlayed++;
        -: 1224:
        -: 1225:        //discard card
    #####: 1226:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1227:        return 0;
        -: 1228:
    #####: 1229:    case salvager:
        -: 1230:        //+1 buy
    #####: 1231:        state->numBuys++;
        -: 1232:
    #####: 1233:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1234:        {
        -: 1235:            //gain coins equal to trashed card
    #####: 1236:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1237:            //trash card
    #####: 1238:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1239:        }
        -: 1240:
        -: 1241:        //discard card
    #####: 1242:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1243:        return 0;
        -: 1244:
    #####: 1245:    case sea_hag:
    #####: 1246:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1247:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1248:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1249:                state->deckCount[i]--;
    #####: 1250:                state->discardCount[i]++;
    #####: 1251:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1252:            }
        -: 1253:        }
    #####: 1254:        return 0;
        -: 1255:
    #####: 1256:    case treasure_map:
        -: 1257:        //search hand for another treasure_map
    #####: 1258:        index = -1;
    #####: 1259:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1260:        {
    #####: 1261:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1262:            {
    #####: 1263:                index = i;
    #####: 1264:                break;
        -: 1265:            }
        -: 1266:        }
    #####: 1267:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1268:        {
        -: 1269:            //trash both treasure cards
    #####: 1270:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1271:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1272:
        -: 1273:            //gain 4 Gold cards
    #####: 1274:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:            {
    #####: 1276:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1277:            }
        -: 1278:
        -: 1279:            //return success
    #####: 1280:            return 1;
        -: 1281:        }
        -: 1282:
        -: 1283:        //no second treasure_map found in hand
    #####: 1284:        return -1;
        -: 1285:    }
        -: 1286:
    #####: 1287:    return -1;
        -: 1288:}
        -: 1289:
function discardCard called 13 returned 100% blocks executed 78%
       13: 1290:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1291:{
        -: 1292:
        -: 1293:    //if card is not trashed, added to Played pile
       13: 1294:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1295:    {
        -: 1296:        //add card to played pile
       13: 1297:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       13: 1298:        state->playedCardCount++;
        -: 1299:    }
        -: 1300:
        -: 1301:    //set played card to -1
       13: 1302:    state->hand[currentPlayer][handPos] = -1;
        -: 1303:
        -: 1304:    //remove card from player's hand
       13: 1305:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1306:    {
        -: 1307:        //reduce number of cards in hand
    #####: 1308:        state->handCount[currentPlayer]--;
        -: 1309:    }
       13: 1310:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1311:    {
        -: 1312:        //reduce number of cards in hand
    #####: 1313:        state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:    else
        -: 1316:    {
        -: 1317:        //replace discarded card with last card in hand
       13: 1318:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1319:        //set last card to -1
       13: 1320:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1321:        //reduce number of cards in hand
       13: 1322:        state->handCount[currentPlayer]--;
        -: 1323:    }
        -: 1324:
       13: 1325:    return 0;
        -: 1326:}
        -: 1327:
function gainCard called 7 returned 100% blocks executed 90%
        7: 1328:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1329:{
        -: 1330:    //Note: supplyPos is enum of choosen card
        -: 1331:
        -: 1332:    //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1333:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
        -: 1334:    {
        2: 1335:        return -1;
        -: 1336:    }
        -: 1337:
        -: 1338:    //added card for [whoseTurn] current player:
        -: 1339:    // toFlag = 0 : add to discard
        -: 1340:    // toFlag = 1 : add to deck
        -: 1341:    // toFlag = 2 : add to hand
        -: 1342:
        5: 1343:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:    {
    #####: 1345:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1346:        state->deckCount[player]++;
        -: 1347:    }
        5: 1348:    else if (toFlag == 2)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1349:    {
        4: 1350:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1351:        state->handCount[player]++;
        -: 1352:    }
        -: 1353:    else
        -: 1354:    {
        1: 1355:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1356:        state->discardCount[player]++;
        -: 1357:    }
        -: 1358:
        -: 1359:    //decrease number in supply pile
        5: 1360:    state->supplyCount[supplyPos]--;
        -: 1361:
        5: 1362:    return 0;
        -: 1363:}
        -: 1364:
function updateCoins called 11 returned 100% blocks executed 91%
       11: 1365:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1366:{
        -: 1367:    int i;
        -: 1368:
        -: 1369:    //reset coin count
       11: 1370:    state->coins = 0;
        -: 1371:
        -: 1372:    //add coins for each Treasure card in player's hand
       66: 1373:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1374:    {
       55: 1375:        if (state->hand[player][i] == copper)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -: 1376:        {
       25: 1377:            state->coins += 1;
        -: 1378:        }
       30: 1379:        else if (state->hand[player][i] == silver)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1380:        {
        2: 1381:            state->coins += 2;
        -: 1382:        }
       28: 1383:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:        {
    #####: 1385:            state->coins += 3;
        -: 1386:        }
        -: 1387:    }
        -: 1388:
        -: 1389:    //add bonus
       11: 1390:    state->coins += bonus;
        -: 1391:
       11: 1392:    return 0;
        -: 1393:}
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
        -: 1397:
