        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:70
        -:    0:Programs:69
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    16200:    8:int compare(const void* a, const void* b) {
    16200:    9:    if (*(int*)a > *(int*)b)
     7287:   10:        return 1;
     8913:   11:    if (*(int*)a < *(int*)b)
     7501:   12:        return -1;
     1412:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
       68:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       68:   44:    SelectStream(1);
       68:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
       68:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       68:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      748:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
     7480:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
     6800:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       68:   73:    if (numPlayers == 2)
        -:   74:    {
       68:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       68:   87:    if (numPlayers == 2)
        -:   88:    {
       68:   89:        state->supplyCount[estate] = 8;
       68:   90:        state->supplyCount[duchy] = 8;
       68:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       68:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       68:  102:    state->supplyCount[silver] = 40;
       68:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
     1428:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    12444:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
    11611:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      527:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        2:  115:                    if (numPlayers == 2) {
        1:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
    #####:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
      526:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      527:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
    11084:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
      204:  140:    for (i = 0; i < numPlayers; i++)
        -:  141:    {
      136:  142:        state->deckCount[i] = 0;
      544:  143:        for (j = 0; j < 3; j++)
        -:  144:        {
      408:  145:            state->deck[i][j] = estate;
      408:  146:            state->deckCount[i]++;
        -:  147:        }
     1088:  148:        for (j = 3; j < 10; j++)
        -:  149:        {
      952:  150:            state->deck[i][j] = copper;
      952:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
      204:  156:    for (i = 0; i < numPlayers; i++)
        -:  157:    {
      136:  158:        if ( shuffle(i, state) < 0 )
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
      204:  165:    for (i = 0; i < numPlayers; i++)
        -:  166:    {
        -:  167:        //initialize hand size to zero
      136:  168:        state->handCount[i] = 0;
      136:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
     1904:  178:    for (i = 0; i <= treasure_map; i++)
        -:  179:    {
     1836:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       68:  184:    state->outpostPlayed = 0;
       68:  185:    state->phase = 0;
       68:  186:    state->numActions = 1;
       68:  187:    state->numBuys = 1;
       68:  188:    state->playedCardCount = 0;
       68:  189:    state->whoseTurn = 0;
       68:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      408:  194:    for (it = 0; it < 5; it++) {
      340:  195:        drawCard(state->whoseTurn, state);
        -:  196:    }
        -:  197:
       68:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
       68:  200:    return 0;
        -:  201:}
        -:  202:
      416:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
      416:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
      416:  211:    if (state->deckCount[player] < 1)
      261:  212:        return -1;
      155:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     3524:  216:    while (state->deckCount[player] > 0) {
     3214:  217:        card = floor(Random() * state->deckCount[player]);
     3214:  218:        newDeck[newDeckPos] = state->deck[player][card];
     3214:  219:        newDeckPos++;
   169462:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
   166248:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
     3214:  223:        state->deckCount[player]--;
        -:  224:    }
     3369:  225:    for (i = 0; i < newDeckPos; i++) {
     3214:  226:        state->deck[player][i] = newDeck[i];
     3214:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
      155:  230:    return 0;
        -:  231:}
        -:  232:
       50:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
       50:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
       50:  239:    if (state->phase != 0)
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
       50:  245:    if ( state->numActions < 1 )
        -:  246:    {
       42:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
        8:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
        8:  254:    if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
        8:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
        8:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
        8:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
        8:  271:    return 0;
        -:  272:}
        -:  273:
       38:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
       38:  282:    who = state->whoseTurn;
        -:  283:
       38:  284:    if (state->numBuys < 1) {
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
       38:  288:    } else if (supplyCount(supplyPos, state) <1) {
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
       38:  292:    } else if (state->coins < getCost(supplyPos)) {
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
       38:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
       38:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
       38:  301:        state->coins = (state->coins) - (getCost(supplyPos));
       38:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
       38:  310:    return 0;
        -:  311:}
        -:  312:
      304:  313:int numHandCards(struct gameState *state) {
      304:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
      616:  317:int handCard(int handPos, struct gameState *state) {
      616:  318:    int currentPlayer = whoseTurn(state);
      616:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
      175:  322:int supplyCount(int card, struct gameState *state) {
      175:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
     1242:  348:int whoseTurn(struct gameState *state) {
     1242:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
       40:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
       40:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
      256:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
      216:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      216:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
       40:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
       40:  365:    if (currentPlayer < (state->numPlayers - 1)) {
       20:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
       20:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
       40:  372:    state->outpostPlayed = 0;
       40:  373:    state->phase = 0;
       40:  374:    state->numActions = 1;
       40:  375:    state->coins = 0;
       40:  376:    state->numBuys = 1;
       40:  377:    state->playedCardCount = 0;
       40:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
      240:  382:    for (k = 0; k < 5; k++) {
      200:  383:        drawCard(state->whoseTurn, state);//Draw a card
        -:  384:    }
        -:  385:
        -:  386:    //Update money
       40:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
       40:  389:    return 0;
        -:  390:}
        -:  391:
       41:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
       41:  397:    if (state->supplyCount[province] == 0)
        -:  398:    {
        1:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
       40:  403:    j = 0;
     1040:  404:    for (i = 0; i < 25; i++)
        -:  405:    {
     1000:  406:        if (state->supplyCount[i] == 0)
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
       40:  411:    if ( j >= 3)
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
       40:  416:    return 0;
        -:  417:}
        -:  418:
        2:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
        2:  422:    int score = 0;
        -:  423:    //score from hand
        7:  424:    for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
        5:  426:        if (state->hand[player][i] == curse) {
    #####:  427:            score = score - 1;
        -:  428:        };
        5:  429:        if (state->hand[player][i] == estate) {
    #####:  430:            score = score + 1;
        -:  431:        };
        5:  432:        if (state->hand[player][i] == duchy) {
    #####:  433:            score = score + 3;
        -:  434:        };
        5:  435:        if (state->hand[player][i] == province) {
    #####:  436:            score = score + 6;
        -:  437:        };
        5:  438:        if (state->hand[player][i] == great_hall) {
    #####:  439:            score = score + 1;
        -:  440:        };
        5:  441:        if (state->hand[player][i] == gardens) {
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
       23:  447:    for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
       21:  449:        if (state->discard[player][i] == curse) {
    #####:  450:            score = score - 1;
        -:  451:        };
       21:  452:        if (state->discard[player][i] == estate) {
        2:  453:            score = score + 1;
        -:  454:        };
       21:  455:        if (state->discard[player][i] == duchy) {
    #####:  456:            score = score + 3;
        -:  457:        };
       21:  458:        if (state->discard[player][i] == province) {
        5:  459:            score = score + 6;
        -:  460:        };
       21:  461:        if (state->discard[player][i] == great_hall) {
    #####:  462:            score = score + 1;
        -:  463:        };
       21:  464:        if (state->discard[player][i] == gardens) {
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
       23:  470:    for (i = 0; i < state->discardCount[player]; i++)
        -:  471:    {
       21:  472:        if (state->deck[player][i] == curse) {
    #####:  473:            score = score - 1;
        -:  474:        };
       21:  475:        if (state->deck[player][i] == estate) {
        1:  476:            score = score + 1;
        -:  477:        };
       21:  478:        if (state->deck[player][i] == duchy) {
    #####:  479:            score = score + 3;
        -:  480:        };
       21:  481:        if (state->deck[player][i] == province) {
        3:  482:            score = score + 6;
        -:  483:        };
       21:  484:        if (state->deck[player][i] == great_hall) {
    #####:  485:            score = score + 1;
        -:  486:        };
       21:  487:        if (state->deck[player][i] == gardens) {
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  489:        };
        -:  490:    }
        -:  491:
        2:  492:    return score;
        -:  493:}
        -:  494:
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
     5004:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
     5004:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
     2133:  571:        for (i = 0; i < state->discardCount[player]; i++) {
     1854:  572:            state->deck[player][i] = state->discard[player][i];
     1854:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
      279:  576:        state->deckCount[player] = state->discardCount[player];
      279:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
      279:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
      279:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
      279:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
      279:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
      279:  597:        if (deckCounter == 0)
      260:  598:            return -1;
        -:  599:
       19:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       19:  601:        state->deckCount[player]--;
       19:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
     4725:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
     4725:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
     4725:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4725:  614:        state->deckCount[player]--;
     4725:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
     4744:  618:    return 0;
        -:  619:}
        -:  620:
      310:  621:int getCost(int cardNumber)
        -:  622:{
      310:  623:    switch( cardNumber )
        -:  624:    {
    #####:  625:    case curse:
    #####:  626:        return 0;
       52:  627:    case estate:
       52:  628:        return 2;
       13:  629:    case duchy:
       13:  630:        return 5;
       42:  631:    case province:
       42:  632:        return 8;
      117:  633:    case copper:
      117:  634:        return 0;
       45:  635:    case silver:
       45:  636:        return 3;
       20:  637:    case gold:
       20:  638:        return 6;
        4:  639:    case adventurer:
        4:  640:        return 6;
    #####:  641:    case council_room:
    #####:  642:        return 5;
    #####:  643:    case feast:
    #####:  644:        return 4;
    #####:  645:    case gardens:
    #####:  646:        return 4;
    #####:  647:    case mine:
    #####:  648:        return 5;
    #####:  649:    case remodel:
    #####:  650:        return 4;
        4:  651:    case smithy:
        4:  652:        return 4;
    #####:  653:    case village:
    #####:  654:        return 3;
    #####:  655:    case baron:
    #####:  656:        return 4;
    #####:  657:    case great_hall:
    #####:  658:        return 3;
    #####:  659:    case minion:
    #####:  660:        return 5;
    #####:  661:    case steward:
    #####:  662:        return 3;
    #####:  663:    case tribute:
    #####:  664:        return 5;
    #####:  665:    case ambassador:
    #####:  666:        return 3;
    #####:  667:    case cutpurse:
    #####:  668:        return 4;
    #####:  669:    case embargo:
    #####:  670:        return 2;
    #####:  671:    case outpost:
    #####:  672:        return 5;
    #####:  673:    case salvager:
    #####:  674:        return 4;
    #####:  675:    case sea_hag:
    #####:  676:        return 4;
    #####:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
       13:  681:    return -1;
        -:  682:}
        -:  683:
        -:  684://will find the card you give it and return the position in the hand the card was found, otherwise a -1
       66:  685:int findCardInHand(int cardToFind, struct gameState *state, int curPlayer)
        -:  686:{
      257:  687:    for(int i = 0; i < state->handCount[curPlayer]; i++)
        -:  688:    {
      241:  689:        if(state->hand[curPlayer][i] == cardToFind)
        -:  690:        {
       50:  691:            return i;
        -:  692:        }
        -:  693:    }
       16:  694:    return -1;
        -:  695:}
        -:  696:
       53:  697:int baronLogic(int choice1, struct gameState *state, int currentPlayer)
        -:  698:{
       53:  699:    state->numBuys++;//Increase buys by 1!
       53:  700:    int cardPos = 0;
        -:  701:
       53:  702:    cardPos = findCardInHand(estate, state, currentPlayer);
        -:  703:
        -:  704:    //if the player wants to get rid of estate and there is one found in the deck
       53:  705:    if(choice1 && cardPos == -1) //bug here! supposed to be "!= -1"
        -:  706:    {
       16:  707:        state->coins += 4;//Add 4 coins to the amount of coins
       16:  708:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][cardPos];
       16:  709:        state->discardCount[currentPlayer]++;
      112:  710:        for (; cardPos < state->handCount[currentPlayer]; cardPos++) 
        -:  711:        {
       96:  712:            state->hand[currentPlayer][cardPos] = state->hand[currentPlayer][cardPos+1];
        -:  713:        }
       16:  714:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       16:  715:        state->handCount[currentPlayer]--;
        -:  716:    }
        -:  717:    //an estate must be given otherwise
        -:  718:    else
        -:  719:    {
       37:  720:        if (supplyCount(estate, state) < 0) //bug here! supposed to be "> 0" 
        -:  721:        {
        5:  722:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  723:
        5:  724:            state->supplyCount[estate]--;//Decrement Estates
        5:  725:            if (supplyCount(estate, state) == 0) 
        -:  726:            {
    #####:  727:                isGameOver(state);
        -:  728:            }
        -:  729:        }
        -:  730:    }
        -:  731:    
       53:  732:    return 0;
        -:  733:}
        -:  734:
       65:  735:int mineLogic(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -:  736:{
       65:  737:    int cardPos = 0;
       65:  738:    int goldToTrash = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  739:
        -:  740:    //if the player did not choose a treasure card then return an error
       65:  741:    if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] > gold) //bug here, < copper
        -:  742:    {
       13:  743:        return -1;
        -:  744:    }
        -:  745:
       52:  746:    if (choice2 > treasure_map || choice2 < curse)
        -:  747:    {
    #####:  748:        return -1;
        -:  749:    }
        -:  750:
        -:  751:    //if the player attemtps to choose a treasure that costs less than the original card return an error
       52:  752:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  753:    {
       39:  754:        return -1;
        -:  755:    }
        -:  756:
        -:  757:    //gain new treasure
       13:  758:    gainCard(goldToTrash, state, 2, currentPlayer); //bug here supposed to be choice2 in the first spot
        -:  759:
        -:  760:    //discard mine from hand
       13:  761:    discardCard(handPos, currentPlayer, state, 0);
        -:  762:
        -:  763:    //trash coin that was replaced
       13:  764:    cardPos = findCardInHand(goldToTrash, state, currentPlayer);
       13:  765:    if(cardPos != -1)
        -:  766:    {
       13:  767:        discardCard(cardPos, currentPlayer, state, 0);
        -:  768:    }
        -:  769:
       13:  770:    return 0;
        -:  771:}
        -:  772:
       39:  773:int minionLogic(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -:  774:{
        -:  775:    //+1 action
       39:  776:    state->numActions++;
        -:  777:
        -:  778:    //discard card from hand
       39:  779:    discardCard(handPos, currentPlayer, state, 0); 
        -:  780:
       39:  781:    if (choice2) //bug here! choice1 supposed to be first, not choice2
        -:  782:    {
    #####:  783:        state->coins = state->coins + 2;
        -:  784:    }
       39:  785:    else if (choice1) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  786:    {
        -:  787:        //other players discard hand and redraw if hand size > 4
      117:  788:        for(int i = 0; i < state->numPlayers; i++)
        -:  789:        {
        -:  790:            //if a player has a hand greater than four or if they are the player that played the card
        -:  791:            //they must discard their deck and get four new cards
       78:  792:            if(state->handCount[i] > 4 || i == currentPlayer)
        -:  793:            {
        -:  794:                //discard hand
       78:  795:                while(state->handCount[i] < 0) //bug here! should be "> 0" not "< 0"
        -:  796:                {
    #####:  797:                    discardCard(handPos, i, state, 0);
        -:  798:                }
        -:  799:
        -:  800:                //draw 4
      195:  801:                for (int j = 0; j < 4; j++)
        -:  802:                {
      156:  803:                    drawCard(i, state);
        -:  804:                }
        -:  805:            }
        -:  806:        }
        -:  807:    }
       39:  808:    return 0;
        -:  809:}
        -:  810:
       65:  811:int tributeLogic(struct gameState *state, int currentPlayer, int nextPlayer)
        -:  812:{
       65:  813:    int tributeRevealedCards[2] = {99999, 99999}; //bug here, should be -1 and -1, not 0 0
        -:  814:
        -:  815:    //if the next player has less than or equal to one card in both their discard pile and deck then do this
       65:  816:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) 
        -:  817:    {
       26:  818:        if (state->deckCount[nextPlayer] > 0) //if the card is in their deck
        -:  819:        {
    #####:  820:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  821:            state->deckCount[nextPlayer]--;
        -:  822:        }
       26:  823:        else if (state->discardCount[nextPlayer] > 0) //if the card is in their discard pile
        -:  824:        {
    #####:  825:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  826:            state->discardCount[nextPlayer]--;
        -:  827:        }
        -:  828:        else 
        -:  829:        {
        -:  830:            //No Card to Reveal
        -:  831:            if (DEBUG) 
        -:  832:            {
        -:  833:                printf("No cards to reveal\n");
        -:  834:            }
        -:  835:        }
        -:  836:    }
        -:  837:    else 
        -:  838:    {
       39:  839:        if (state->deckCount[nextPlayer] == 0) //if the player has no cards in his deck
        -:  840:        {
    #####:  841:            for (int i = 0; i < state->discardCount[nextPlayer]; i++) 
        -:  842:            {
    #####:  843:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  844:                state->deckCount[nextPlayer]++;
    #####:  845:                state->discard[nextPlayer][i] = -1;
    #####:  846:                state->discardCount[nextPlayer]--;
        -:  847:            }
        -:  848:
    #####:  849:            shuffle(nextPlayer,state);//Shuffle the deck
        -:  850:        }
       39:  851:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       39:  852:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       39:  853:        state->deckCount[nextPlayer]--;
       39:  854:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; //bug here! should be 1, not 0
       39:  855:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       39:  856:        state->deckCount[nextPlayer]--;
        -:  857:    }
        -:  858:
       65:  859:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -:  860:    { //If we have a duplicate card, just drop one
       26:  861:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       26:  862:        state->playedCardCount++;
       26:  863:        tributeRevealedCards[1] = -1;
        -:  864:    }
        -:  865:
      260:  866:    for (int i = 0; i <= 2; i ++) 
        -:  867:    {
      195:  868:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
        -:  869:        { //Treasure cards
       13:  870:            state->coins += 2;
        -:  871:        }
        -:  872:
      182:  873:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
        -:  874:        { //Victory Card Found
       78:  875:            drawCard(currentPlayer, state);
       78:  876:            drawCard(currentPlayer, state);
        -:  877:        }
        -:  878:        else 
        -:  879:        { //Action Card
      104:  880:            state->numActions = state->numActions + 2;
        -:  881:        }
        -:  882:    }
        -:  883:
       65:  884:    return 0;
        -:  885:}
        -:  886:
       77:  887:int ambassadorLogic(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -:  888:{
       77:  889:    int cardPos = 0;
       77:  890:    int j = 0;		//used to check if player has enough cards to discard
        -:  891:
       77:  892:    if (choice2 > 2 || choice2 < 0) //if the player picked too many or too few cards then return an error
        -:  893:    {
       12:  894:        return -1;
        -:  895:    }
        -:  896:
       65:  897:    if (choice1 == handPos) //can't choose to give people ambassador
        -:  898:    {
       65:  899:        return -1;
        -:  900:    }
        -:  901:
        -:  902:    //used to count how many cards the player has to give away
    #####:  903:    for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  904:    {
    #####:  905:        if (i == handPos && i == state->hand[currentPlayer][choice1] && i == choice1) //bug here should be "i != handPos" and "i != choice1"
        -:  906:        {
    #####:  907:            j++;
        -:  908:        }
        -:  909:    }
        -:  910:    //if the player has less cards then they said they wanted to give away, return -1
    #####:  911:    if (j < choice2)
        -:  912:    {
    #####:  913:        return -1;
        -:  914:    }
        -:  915:
        -:  916:    if (DEBUG)
        -:  917:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  918:
        -:  919:    //increase supply count for choosen card by amount being discarded
    #####:  920:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  921:
        -:  922:    //each other player gains a copy of revealed card
    #####:  923:    for (int i = 0; i < state->numPlayers; i++)
        -:  924:    {
    #####:  925:        if (i != currentPlayer)
        -:  926:        {
    #####:  927:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  928:        }
        -:  929:    }
        -:  930:
        -:  931:    //discard played card from hand
    #####:  932:    discardCard(handPos, currentPlayer, state, 0);
        -:  933:
        -:  934:    //trash copies of cards returned to supply
    #####:  935:    for (int i = 0; i < choice2; i++)
        -:  936:    {
    #####:  937:        cardPos = findCardInHand(i, state, currentPlayer); //bug here, should be choice1, not i
    #####:  938:        if(cardPos != -1)
        -:  939:        {
    #####:  940:            discardCard(cardPos, currentPlayer, state, 1);
        -:  941:        }
        -:  942:    }
        -:  943:
    #####:  944:    return 0;
        -:  945:
        -:  946:}
        -:  947:
      242:  948:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  949:{
        -:  950:    int i;
        -:  951:    int j;
        -:  952:    int k;
        -:  953:    int x;
        -:  954:    int index;
      242:  955:    int currentPlayer = whoseTurn(state);
      242:  956:    int nextPlayer = currentPlayer + 1;
        -:  957:
        -:  958:    //int tributeRevealedCards[2] = {-1, -1};
        -:  959:    int temphand[MAX_HAND];// moved above the if statement
      242:  960:    int drawntreasure=0;
        -:  961:    int cardDrawn;
      242:  962:    int z = 0;// this is the counter for the temp hand
      242:  963:    if (nextPlayer > (state->numPlayers - 1)) {
        6:  964:        nextPlayer = 0;
        -:  965:    }
        -:  966:
        -:  967:
        -:  968:    //uses switch to select card and perform actions
      242:  969:    switch( card )
        -:  970:    {
        6:  971:    case adventurer:
       27:  972:        while(drawntreasure<2) {
       15:  973:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
        1:  974:                shuffle(currentPlayer, state);
        -:  975:            }
       15:  976:            drawCard(currentPlayer, state);
       15:  977:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  978:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12:  979:                drawntreasure++;
        -:  980:            else {
        3:  981:                temphand[z]=cardDrawn;
        3:  982:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  983:                z++;
        -:  984:            }
        -:  985:        }
       15:  986:        while(z-1>=0) {
        3:  987:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3:  988:            z=z-1;
        -:  989:        }
        6:  990:        return 0;
        -:  991:
    #####:  992:    case council_room:
        -:  993:        //+4 Cards
    #####:  994:        for (i = 0; i < 4; i++)
        -:  995:        {
    #####:  996:            drawCard(currentPlayer, state);
        -:  997:        }
        -:  998:
        -:  999:        //+1 Buy
    #####: 1000:        state->numBuys++;
        -: 1001:
        -: 1002:        //Each other player draws a card
    #####: 1003:        for (i = 0; i < state->numPlayers; i++)
        -: 1004:        {
    #####: 1005:            if ( i != currentPlayer )
        -: 1006:            {
    #####: 1007:                drawCard(i, state);
        -: 1008:            }
        -: 1009:        }
        -: 1010:
        -: 1011:        //put played card in played card pile
    #####: 1012:        discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
    #####: 1014:        return 0;
        -: 1015:
    #####: 1016:    case feast:
        -: 1017:        //gain card with cost up to 5
        -: 1018:        //Backup hand
    #####: 1019:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1020:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1021:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1022:        }
        -: 1023:        //Backup hand
        -: 1024:
        -: 1025:        //Update Coins for Buy
    #####: 1026:        updateCoins(currentPlayer, state, 5);
    #####: 1027:        x = 1;//Condition to loop on
    #####: 1028:        while( x == 1) {//Buy one card
    #####: 1029:            if (supplyCount(choice1, state) <= 0) {
        -: 1030:                if (DEBUG)
        -: 1031:                    printf("None of that card left, sorry!\n");
        -: 1032:
        -: 1033:                if (DEBUG) {
        -: 1034:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1035:                }
        -: 1036:            }
    #####: 1037:            else if (state->coins < getCost(choice1)) {
    #####: 1038:                printf("That card is too expensive!\n");
        -: 1039:
        -: 1040:                if (DEBUG) {
        -: 1041:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1042:                }
        -: 1043:            }
        -: 1044:            else {
        -: 1045:
        -: 1046:                if (DEBUG) {
        -: 1047:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1048:                }
        -: 1049:
    #####: 1050:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1051:                x = 0;//No more buying cards
        -: 1052:
        -: 1053:                if (DEBUG) {
        -: 1054:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1055:                }
        -: 1056:
        -: 1057:            }
        -: 1058:        }
        -: 1059:
        -: 1060:        //Reset Hand
    #####: 1061:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1062:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1063:            temphand[i] = -1;
        -: 1064:        }
        -: 1065:        //Reset Hand
        -: 1066:
    #####: 1067:        return 0;
        -: 1068:
    #####: 1069:    case gardens:
    #####: 1070:        return -1;
        -: 1071:
       65: 1072:    case mine:
       65: 1073:        mineLogic(choice1, choice2, state, handPos, currentPlayer);
        -: 1074:
       65: 1075:    case remodel:
       65: 1076:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1077:
       65: 1078:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1079:        {
       26: 1080:            return -1;
        -: 1081:        }
        -: 1082:
       39: 1083:        gainCard(choice2, state, 0, currentPlayer);
        -: 1084:
        -: 1085:        //discard card from hand
       39: 1086:        discardCard(handPos, currentPlayer, state, 0);
        -: 1087:
        -: 1088:        //discard trashed card
       65: 1089:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:        {
       52: 1091:            if (state->hand[currentPlayer][i] == j)
        -: 1092:            {
       26: 1093:                discardCard(i, currentPlayer, state, 0);
       26: 1094:                break;
        -: 1095:            }
        -: 1096:        }
        -: 1097:
        -: 1098:
       39: 1099:        return 0;
        -: 1100:
        2: 1101:    case smithy:
        -: 1102:        //+3 Cards
        8: 1103:        for (i = 0; i < 3; i++)
        -: 1104:        {
        6: 1105:            drawCard(currentPlayer, state);
        -: 1106:        }
        -: 1107:
        -: 1108:        //discard card from hand
        2: 1109:        discardCard(handPos, currentPlayer, state, 0);
        2: 1110:        return 0;
        -: 1111:
    #####: 1112:    case village:
        -: 1113:        //+1 Card
    #####: 1114:        drawCard(currentPlayer, state);
        -: 1115:
        -: 1116:        //+2 Actions
    #####: 1117:        state->numActions = state->numActions + 2;
        -: 1118:
        -: 1119:        //discard played card from hand
    #####: 1120:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1121:        return 0;
        -: 1122:
       53: 1123:    case baron:
       53: 1124:        baronLogic(choice1, state, currentPlayer);
        -: 1125:
       53: 1126:    case great_hall:
        -: 1127:        //+1 Card
       53: 1128:        drawCard(currentPlayer, state);
        -: 1129:
        -: 1130:        //+1 Actions
       53: 1131:        state->numActions++;
        -: 1132:
        -: 1133:        //discard card from hand
       53: 1134:        discardCard(handPos, currentPlayer, state, 0);
       53: 1135:        return 0;
        -: 1136:
       39: 1137:    case minion:
       39: 1138:        minionLogic(choice1, choice2, state, handPos, currentPlayer);
        -: 1139:
       39: 1140:    case steward:
       39: 1141:        if (choice1 == 1)
        -: 1142:        {
        -: 1143:            //+2 cards
       39: 1144:            drawCard(currentPlayer, state);
       39: 1145:            drawCard(currentPlayer, state);
        -: 1146:        }
    #####: 1147:        else if (choice1 == 2)
        -: 1148:        {
        -: 1149:            //+2 coins
    #####: 1150:            state->coins = state->coins + 2;
        -: 1151:        }
        -: 1152:        else
        -: 1153:        {
        -: 1154:            //trash 2 cards in hand
    #####: 1155:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:            discardCard(choice3, currentPlayer, state, 1);
        -: 1157:        }
        -: 1158:
        -: 1159:        //discard card from hand
       39: 1160:        discardCard(handPos, currentPlayer, state, 0);
       39: 1161:        return 0;
        -: 1162:
       65: 1163:    case tribute:
       65: 1164:        tributeLogic(state, currentPlayer, nextPlayer);
        -: 1165:
       77: 1166:    case ambassador:
       77: 1167:        ambassadorLogic(choice1, choice2, state, handPos, currentPlayer);
        -: 1168:
       77: 1169:    case cutpurse:
        -: 1170:
       77: 1171:        updateCoins(currentPlayer, state, 2);
      231: 1172:        for (i = 0; i < state->numPlayers; i++)
        -: 1173:        {
      154: 1174:            if (i != currentPlayer)
        -: 1175:            {
       77: 1176:                for (j = 0; j < state->handCount[i]; j++)
        -: 1177:                {
    #####: 1178:                    if (state->hand[i][j] == copper)
        -: 1179:                    {
    #####: 1180:                        discardCard(j, i, state, 0);
    #####: 1181:                        break;
        -: 1182:                    }
    #####: 1183:                    if (j == state->handCount[i])
        -: 1184:                    {
    #####: 1185:                        for (k = 0; k < state->handCount[i]; k++)
        -: 1186:                        {
        -: 1187:                            if (DEBUG)
        -: 1188:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:                        }
    #####: 1190:                        break;
        -: 1191:                    }
        -: 1192:                }
        -: 1193:
        -: 1194:            }
        -: 1195:
        -: 1196:        }
        -: 1197:
        -: 1198:        //discard played card from hand
       77: 1199:        discardCard(handPos, currentPlayer, state, 0);
        -: 1200:
       77: 1201:        return 0;
        -: 1202:
        -: 1203:
    #####: 1204:    case embargo:
        -: 1205:        //+2 Coins
    #####: 1206:        state->coins = state->coins + 2;
        -: 1207:
        -: 1208:        //see if selected pile is in play
    #####: 1209:        if ( state->supplyCount[choice1] == -1 )
        -: 1210:        {
    #####: 1211:            return -1;
        -: 1212:        }
        -: 1213:
        -: 1214:        //add embargo token to selected supply pile
    #####: 1215:        state->embargoTokens[choice1]++;
        -: 1216:
        -: 1217:        //trash card
    #####: 1218:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1219:        return 0;
        -: 1220:
    #####: 1221:    case outpost:
        -: 1222:        //set outpost flag
    #####: 1223:        state->outpostPlayed++;
        -: 1224:
        -: 1225:        //discard card
    #####: 1226:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1227:        return 0;
        -: 1228:
    #####: 1229:    case salvager:
        -: 1230:        //+1 buy
    #####: 1231:        state->numBuys++;
        -: 1232:
    #####: 1233:        if (choice1)
        -: 1234:        {
        -: 1235:            //gain coins equal to trashed card
    #####: 1236:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1237:            //trash card
    #####: 1238:            discardCard(choice1, currentPlayer, state, 1);
        -: 1239:        }
        -: 1240:
        -: 1241:        //discard card
    #####: 1242:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1243:        return 0;
        -: 1244:
    #####: 1245:    case sea_hag:
    #####: 1246:        for (i = 0; i < state->numPlayers; i++) {
    #####: 1247:            if (i != currentPlayer) {
    #####: 1248:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1249:                state->deckCount[i]--;
    #####: 1250:                state->discardCount[i]++;
    #####: 1251:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1252:            }
        -: 1253:        }
    #####: 1254:        return 0;
        -: 1255:
    #####: 1256:    case treasure_map:
        -: 1257:        //search hand for another treasure_map
    #####: 1258:        index = -1;
    #####: 1259:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1260:        {
    #####: 1261:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1262:            {
    #####: 1263:                index = i;
    #####: 1264:                break;
        -: 1265:            }
        -: 1266:        }
    #####: 1267:        if (index > -1)
        -: 1268:        {
        -: 1269:            //trash both treasure cards
    #####: 1270:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1271:            discardCard(index, currentPlayer, state, 1);
        -: 1272:
        -: 1273:            //gain 4 Gold cards
    #####: 1274:            for (i = 0; i < 4; i++)
        -: 1275:            {
    #####: 1276:                gainCard(gold, state, 1, currentPlayer);
        -: 1277:            }
        -: 1278:
        -: 1279:            //return success
    #####: 1280:            return 1;
        -: 1281:        }
        -: 1282:
        -: 1283:        //no second treasure_map found in hand
    #####: 1284:        return -1;
        -: 1285:    }
        -: 1286:
    #####: 1287:    return -1;
        -: 1288:}
        -: 1289:
      301: 1290:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1291:{
        -: 1292:
        -: 1293:    //if card is not trashed, added to Played pile
      301: 1294:    if (trashFlag < 1)
        -: 1295:    {
        -: 1296:        //add card to played pile
      301: 1297:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      301: 1298:        state->playedCardCount++;
        -: 1299:    }
        -: 1300:
        -: 1301:    //set played card to -1
      301: 1302:    state->hand[currentPlayer][handPos] = -1;
        -: 1303:
        -: 1304:    //remove card from player's hand
      301: 1305:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1306:    {
        -: 1307:        //reduce number of cards in hand
       26: 1308:        state->handCount[currentPlayer]--;
        -: 1309:    }
      275: 1310:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1311:    {
        -: 1312:        //reduce number of cards in hand
    #####: 1313:        state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:    else
        -: 1316:    {
        -: 1317:        //replace discarded card with last card in hand
      275: 1318:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1319:        //set last card to -1
      275: 1320:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1321:        //reduce number of cards in hand
      275: 1322:        state->handCount[currentPlayer]--;
        -: 1323:    }
        -: 1324:
      301: 1325:    return 0;
        -: 1326:}
        -: 1327:
       95: 1328:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1329:{
        -: 1330:    //Note: supplyPos is enum of choosen card
        -: 1331:
        -: 1332:    //check if supply pile is empty (0) or card is not used in game (-1)
       95: 1333:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1334:    {
        5: 1335:        return -1;
        -: 1336:    }
        -: 1337:
        -: 1338:    //added card for [whoseTurn] current player:
        -: 1339:    // toFlag = 0 : add to discard
        -: 1340:    // toFlag = 1 : add to deck
        -: 1341:    // toFlag = 2 : add to hand
        -: 1342:
       90: 1343:    if (toFlag == 1)
        -: 1344:    {
    #####: 1345:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1346:        state->deckCount[player]++;
        -: 1347:    }
       90: 1348:    else if (toFlag == 2)
        -: 1349:    {
       13: 1350:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
       13: 1351:        state->handCount[player]++;
        -: 1352:    }
        -: 1353:    else
        -: 1354:    {
       77: 1355:        state->discard[player][ state->discardCount[player] ] = supplyPos;
       77: 1356:        state->discardCount[player]++;
        -: 1357:    }
        -: 1358:
        -: 1359:    //decrease number in supply pile
       90: 1360:    state->supplyCount[supplyPos]--;
        -: 1361:
       90: 1362:    return 0;
        -: 1363:}
        -: 1364:
      193: 1365:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1366:{
        -: 1367:    int i;
        -: 1368:
        -: 1369:    //reset coin count
      193: 1370:    state->coins = 0;
        -: 1371:
        -: 1372:    //add coins for each Treasure card in player's hand
     1356: 1373:    for (i = 0; i < state->handCount[player]; i++)
        -: 1374:    {
     1163: 1375:        if (state->hand[player][i] == copper)
        -: 1376:        {
      610: 1377:            state->coins += 1;
        -: 1378:        }
      553: 1379:        else if (state->hand[player][i] == silver)
        -: 1380:        {
       65: 1381:            state->coins += 2;
        -: 1382:        }
      488: 1383:        else if (state->hand[player][i] == gold)
        -: 1384:        {
       13: 1385:            state->coins += 3;
        -: 1386:        }
        -: 1387:    }
        -: 1388:
        -: 1389:    //add bonus
      193: 1390:    state->coins += bonus;
        -: 1391:
      193: 1392:    return 0;
        -: 1393:}
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
        -: 1397:
