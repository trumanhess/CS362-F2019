        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "custom_assert.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://tribute card
        -:    9:/*
        -:   10:    test 1: player2 has no cards
        -:   11:    test 2: player2 has one card in deck (copper) CHANGED
        -:   12:    test 3: player2 has one card in discard pile (action card) CHANGED
        -:   13:    test 4: player2 has a deck of five cards (treasure card, action card)
        -:   14:    test 5: player2 has a deck of five cards but duplicate (copper, copper)
        -:   15:*/
        -:   16:
        5:   17:int universalTest(struct gameState *pre, struct gameState *post, int discarded, int cardsGained, int buysGained, int coinsGained, int actionsGained, int player)
        -:   18:{
        5:   19:    printf("Number buys:\n");
        5:   20:    ASSERT((pre->numBuys + buysGained) == post->numBuys);
        5:   21:    printf("\texpected = %d, actual = %d\n", pre->numBuys + buysGained, post->numBuys);
        -:   22:
        5:   23:    printf("Number Actions:\n");
        5:   24:    ASSERT(post->numActions == pre->numActions + actionsGained);
        5:   25:    printf("\texpected = %d, actual = %d\n", pre->numActions + actionsGained, post->numActions);
        -:   26:
        5:   27:    printf("Number coins:\n");
        5:   28:    ASSERT((pre->coins + coinsGained) == post->coins);
        5:   29:    printf("\texpected = %d, actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   30:
        5:   31:    printf("Hand count:\n");
        5:   32:    ASSERT(post->handCount[player] == pre->handCount[player] - discarded + cardsGained);
        5:   33:    printf("\texpected = %d, actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        -:   34:
        5:   35:    return 0;
        -:   36:}
        -:   37:
        1:   38:int main()
        -:   39:{
        -:   40:    /*
        -:   41:    int numPlayers; //number of players
        -:   42:    int supplyCount[treasure_map+1];  //this is the amount of a specific type of card given a specific number.
        -:   43:    int embargoTokens[treasure_map+1];
        -:   44:    int outpostPlayed;
        -:   45:    int outpostTurn;
        -:   46:    int whoseTurn;
        -:   47:    int phase;
        -:   48:    int numActions; /* Starts at 1 each turn
        -:   49:    int coins; /* Use as you see fit!
        -:   50:    int numBuys; /* Starts at 1 each turn
        -:   51:    int hand[MAX_PLAYERS][MAX_HAND];
        -:   52:    int handCount[MAX_PLAYERS];
        -:   53:    int deck[MAX_PLAYERS][MAX_DECK];
        -:   54:    int deckCount[MAX_PLAYERS];
        -:   55:    int discard[MAX_PLAYERS][MAX_DECK];
        -:   56:    int discardCount[MAX_PLAYERS];
        -:   57:    int playedCards[MAX_DECK];
        -:   58:    int playedCardCount;
        -:   59:    */
        1:   60:    int cardsGained = 0;
        1:   61:    int cardsDiscarded = 0;
        1:   62:    int coinsGained = 0;
        1:   63:    int buysGained = 0;
        1:   64:    int actionsGained = 0;
        -:   65:
        1:   66:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   67:    int seed = 1000;
        1:   68:    int numPlayers = 2;
        1:   69:    int player1 = 0;
        1:   70:    int player2 = 1;
        -:   71:	struct gameState preG, postG;
        1:   72:	int k[10] = {adventurer, silver, copper, gold, mine, minion,
        -:   73:			sea_hag, baron, smithy, council_room};
        -:   74:
        -:   75://REPLACE ALL //assertS WITH OWN IMPLEMENTATION
        1:   76:    printf("\n\n---------------------------------Testing Tribute--------------------------\n\n");
        1:   77:    initializeGame(numPlayers, k, seed, &preG);
        -:   78:
        -:   79:/*
        -:   80:    test 1: player2 has no cards
        -:   81:    expect: no change
        -:   82:*/
        1:   83:    printf("\n\nTest 1:\n");
        1:   84:    preG.hand[player1][0] = minion;
        1:   85:	preG.hand[player1][1] = copper;
        1:   86:	preG.hand[player1][2] = tribute;
        1:   87:	preG.hand[player1][3] = estate;
        1:   88:	preG.hand[player1][4] = mine;
        1:   89:    preG.handCount[player1] = 5;
        -:   90:
        1:   91:    preG.handCount[player2] = 0;
        1:   92:    preG.deckCount[player2] = 0;
        1:   93:    preG.discardCount[player2] = 0;
        -:   94:
        1:   95:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   96:    cardsDiscarded = 0;
        1:   97:    buysGained = 0;
        1:   98:    coinsGained = 0;
        1:   99:    actionsGained = 0;
        1:  100:    cardsGained = 0;
        1:  101:	tributeLogic(&postG, player1, player2);
        -:  102:
        1:  103:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  104:
        -:  105:/*
        -:  106:    test 2: player2 has one card in hand (copper)
        -:  107:    expect: player1 gain +2 coin; player2 one less card in hand (potentially a full deck because he would shuffle a new hand?)
        -:  108:*/
        1:  109:    printf("\n\nTest 2:\n");
        -:  110:
        1:  111:    preG.hand[player1][0] = minion;
        1:  112:	preG.hand[player1][1] = copper;
        1:  113:	preG.hand[player1][2] = tribute;
        1:  114:	preG.hand[player1][3] = estate;
        1:  115:	preG.hand[player1][4] = mine;
        -:  116:
        1:  117:    preG.deck[player2][0] = copper;
        1:  118:    preG.deckCount[player2] = 1;
        1:  119:    preG.discardCount[player2] = 0;
        -:  120:
        1:  121:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  122:    cardsDiscarded = 0;
        1:  123:    buysGained = 0;
        1:  124:    coinsGained = 2;
        1:  125:    actionsGained = 0;
        1:  126:    cardsGained = 0;
        1:  127:	tributeLogic(&postG, player1, player2);
        -:  128:
        1:  129:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  130:
        1:  131:    ASSERT(preG.handCount[player2] - 1 == postG.handCount[player2]);
        -:  132:
        -:  133:/*
        -:  134:    test 3: player2 has one card in deck (action card)
        -:  135:    expect: player1 gain +2 actions; player2 to have one less card in deck (maybe he will have more from a shuffle?)
        -:  136:*/
        1:  137:    printf("\n\nTest 3:\n");
        -:  138:
        1:  139:    preG.hand[player1][0] = minion;
        1:  140:	preG.hand[player1][1] = copper;
        1:  141:	preG.hand[player1][2] = tribute;
        1:  142:	preG.hand[player1][3] = estate;
        1:  143:	preG.hand[player1][4] = mine;
        -:  144:
        1:  145:    preG.deck[player2][0] = tribute;
        1:  146:    preG.deckCount[player2] = 1;
        1:  147:    preG.discardCount[player2] = 0;
        -:  148:
        1:  149:    cardsDiscarded = 0;
        1:  150:    buysGained = 0;
        1:  151:    coinsGained = 0;
        1:  152:    actionsGained = 2;
        1:  153:    cardsGained = 0;
        1:  154:    memcpy(&postG, &preG, sizeof(struct gameState));
        -:  155:    
        1:  156:	tributeLogic(&postG, player1, player2);
        -:  157:
        1:  158:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  159:
        1:  160:    ASSERT(preG.deckCount[player2] - 1 == postG.deckCount[player2]);
        -:  161:
        -:  162:/*
        -:  163:    test 4: player2 has a hand of five cards (victory card, action card)
        -:  164:    expect: player1 gains +2 cards and +2 actions; player2 loses two cards from hand
        -:  165:*/
        1:  166:    printf("\n\nTest 4:\n");
        -:  167:
        1:  168:    preG.hand[player1][0] = minion;
        1:  169:	preG.hand[player1][1] = tribute;
        1:  170:	preG.hand[player1][2] = tribute;
        1:  171:	preG.hand[player1][3] = estate;
        1:  172:	preG.hand[player1][4] = mine;
        1:  173:    preG.handCount[player1] = 5;
        -:  174:
        1:  175:    preG.deck[player2][0] = copper;
        1:  176:	preG.deck[player2][1] = copper;
        1:  177:	preG.deck[player2][2] = copper;
        1:  178:	preG.deck[player2][3] = tribute;
        1:  179:	preG.deck[player2][4] = estate;
        -:  180:
        -:  181:    /*preG.hand[player2][0] = copper;
        -:  182:	preG.hand[player2][1] = copper;
        -:  183:	preG.hand[player2][2] = copper;
        -:  184:	preG.hand[player2][3] = tribute;
        -:  185:	preG.hand[player2][4] = copper;*/
        -:  186:    //change this?
        -:  187:
        1:  188:    preG.deckCount[player2] = 5;
        1:  189:    preG.discardCount[player2] = 0;
        1:  190:    preG.handCount[player2] = 0;
        -:  191:
        1:  192:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  193:    cardsDiscarded = 0;
        1:  194:    buysGained = 0;
        1:  195:    coinsGained = 2;
        1:  196:    actionsGained = 2;
        1:  197:    cardsGained = 0;
        1:  198:	tributeLogic(&postG, player1, player2);
        -:  199:
        1:  200:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  201:
        1:  202:    ASSERT(preG.handCount[player2] - 2 == postG.handCount[player2]);
        -:  203:
        -:  204:/*
        -:  205:    test 5: player2 has a hand of five cards (copper, copper)
        -:  206:    expect: player1 gains +2 coins; player2 loses two cards (?)
        -:  207:*/
        1:  208:    printf("\n\nTest 5:\n");
        -:  209:
        1:  210:    preG.hand[player1][0] = minion;
        1:  211:	preG.hand[player1][1] = copper;
        1:  212:	preG.hand[player1][2] = tribute;
        1:  213:	preG.hand[player1][3] = estate;
        1:  214:	preG.hand[player1][4] = mine;
        -:  215:
        1:  216:    preG.deck[player2][0] = copper;
        1:  217:	preG.deck[player2][1] = copper;
        1:  218:	preG.deck[player2][2] = tribute;
        1:  219:	preG.deck[player2][3] = estate;
        1:  220:	preG.deck[player2][4] = mine;
        -:  221:
        1:  222:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  223:    cardsDiscarded = 0;
        1:  224:    buysGained = 0;
        1:  225:    coinsGained = 2;
        1:  226:    actionsGained = 0;
        1:  227:    cardsGained = 0;
        1:  228:	tributeLogic(&postG, player1, player2);
        -:  229:
        1:  230:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  231:
        1:  232:    ASSERT(preG.handCount[player2] - 2 == postG.handCount[player2]);
        -:  233:
        1:  234:        printf("\n\n---------------------------------End Testing Tribute--------------------------\n\n");
        -:  235:
        1:  236:    return 0;
        -:  237:}
