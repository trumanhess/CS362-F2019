        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "custom_assert.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://tribute card
        -:    9:/*
        -:   10:    test 1: player2 has no cards
        -:   11:    test 2: player2 has one card in deck (copper) CHANGED
        -:   12:    test 3: player2 has one card in discard pile (action card) CHANGED
        -:   13:    test 4: player2 has a deck of five cards (treasure card, action card)
        -:   14:    test 5: player2 has a deck of five cards but duplicate (copper, copper)
        -:   15:*/
        -:   16:
        5:   17:int universalTest(struct gameState *pre, struct gameState *post, int discarded, int cardsGained, int buysGained, int coinsGained, int actionsGained, int player)
        -:   18:{
        5:   19:    printf("Number buys:\n");
        5:   20:    ASSERT((pre->numBuys + buysGained) == post->numBuys);
        5:   21:    printf("\texpected = %d, actual = %d\n", pre->numBuys + buysGained, post->numBuys);
        -:   22:
        5:   23:    printf("Number Actions:\n");
        5:   24:    ASSERT(post->numActions == pre->numActions + actionsGained);
        5:   25:    printf("\texpected = %d, actual = %d\n", pre->numActions + actionsGained, post->numActions);
        -:   26:
        5:   27:    printf("Number coins:\n");
        5:   28:    ASSERT((pre->coins + coinsGained) == post->coins);
        5:   29:    printf("\texpected = %d, actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   30:
        5:   31:    printf("Hand count:\n");
        5:   32:    ASSERT(post->handCount[player] == pre->handCount[player] - discarded + cardsGained);
        5:   33:    printf("\texpected = %d, actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        -:   34:
        5:   35:    return 0;
        -:   36:}
        -:   37:
        1:   38:int main()
        -:   39:{
        1:   40:    int cardsGained = 0;
        1:   41:    int cardsDiscarded = 0;
        1:   42:    int coinsGained = 0;
        1:   43:    int buysGained = 0;
        1:   44:    int actionsGained = 0;
        -:   45:
        1:   46:    int seed = 1000;
        1:   47:    int numPlayers = 2;
        1:   48:    int player1 = 0;
        1:   49:    int player2 = 1;
        -:   50:	struct gameState preG, postG;
        1:   51:	int k[10] = {adventurer, silver, copper, gold, mine, minion,
        -:   52:			sea_hag, baron, smithy, council_room};
        -:   53:
        1:   54:    printf("\n\n---------------------------------Testing Tribute--------------------------\n\n");
        1:   55:    initializeGame(numPlayers, k, seed, &preG);
        -:   56:
        -:   57:/*
        -:   58:    test 1: player2 has no cards
        -:   59:    expect: no change
        -:   60:*/
        1:   61:    printf("\n\nTest 1:\n");
        1:   62:    preG.hand[player1][0] = minion;
        1:   63:	preG.hand[player1][1] = copper;
        1:   64:	preG.hand[player1][2] = tribute;
        1:   65:	preG.hand[player1][3] = estate;
        1:   66:	preG.hand[player1][4] = mine;
        1:   67:    preG.handCount[player1] = 5;
        -:   68:
        1:   69:    preG.handCount[player2] = 0;
        1:   70:    preG.deckCount[player2] = 0;
        1:   71:    preG.discardCount[player2] = 0;
        -:   72:
        1:   73:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   74:    cardsDiscarded = 0;
        1:   75:    buysGained = 0;
        1:   76:    coinsGained = 0;
        1:   77:    actionsGained = 0;
        1:   78:    cardsGained = 0;
        1:   79:	tributeLogic(&postG, player1, player2);
        -:   80:
        1:   81:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:   82:
        -:   83:/*
        -:   84:    test 2: player2 has one card in hand (copper)
        -:   85:    expect: player1 gain +2 coin; player2 one less card in hand (potentially a full deck because he would shuffle a new hand?)
        -:   86:*/
        1:   87:    printf("\n\nTest 2:\n");
        -:   88:
        1:   89:    preG.hand[player1][0] = minion;
        1:   90:	preG.hand[player1][1] = copper;
        1:   91:	preG.hand[player1][2] = tribute;
        1:   92:	preG.hand[player1][3] = estate;
        1:   93:	preG.hand[player1][4] = mine;
        -:   94:
        1:   95:    preG.deck[player2][0] = copper;
        1:   96:    preG.deckCount[player2] = 1;
        1:   97:    preG.discardCount[player2] = 0;
        -:   98:
        1:   99:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  100:    cardsDiscarded = 0;
        1:  101:    buysGained = 0;
        1:  102:    coinsGained = 2;
        1:  103:    actionsGained = 0;
        1:  104:    cardsGained = 0;
        1:  105:	tributeLogic(&postG, player1, player2);
        -:  106:
        1:  107:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  108:
        1:  109:    ASSERT(preG.handCount[player2] - 1 == postG.handCount[player2]);
        -:  110:
        -:  111:/*
        -:  112:    test 3: player2 has one card in deck (action card)
        -:  113:    expect: player1 gain +2 actions; player2 to have one less card in deck (maybe he will have more from a shuffle?)
        -:  114:*/
        1:  115:    printf("\n\nTest 3:\n");
        -:  116:
        1:  117:    preG.hand[player1][0] = minion;
        1:  118:	preG.hand[player1][1] = copper;
        1:  119:	preG.hand[player1][2] = tribute;
        1:  120:	preG.hand[player1][3] = estate;
        1:  121:	preG.hand[player1][4] = mine;
        -:  122:
        1:  123:    preG.deck[player2][0] = tribute;
        1:  124:    preG.deckCount[player2] = 1;
        1:  125:    preG.discardCount[player2] = 0;
        -:  126:
        1:  127:    cardsDiscarded = 0;
        1:  128:    buysGained = 0;
        1:  129:    coinsGained = 0;
        1:  130:    actionsGained = 2;
        1:  131:    cardsGained = 0;
        1:  132:    memcpy(&postG, &preG, sizeof(struct gameState));
        -:  133:    
        1:  134:	tributeLogic(&postG, player1, player2);
        -:  135:
        1:  136:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  137:
        1:  138:    ASSERT(preG.deckCount[player2] - 1 == postG.deckCount[player2]);
        -:  139:
        -:  140:/*
        -:  141:    test 4: player2 has a hand of five cards (victory card, treasure card)
        -:  142:    expect: player1 gains +2 cards and +2 actions; player2 loses two cards from hand
        -:  143:*/
        1:  144:    printf("\n\nTest 4:\n");
        -:  145:
        1:  146:    preG.hand[player1][0] = minion;
        1:  147:	preG.hand[player1][1] = tribute;
        1:  148:	preG.hand[player1][2] = tribute;
        1:  149:	preG.hand[player1][3] = estate;
        1:  150:	preG.hand[player1][4] = mine;
        1:  151:    preG.handCount[player1] = 5;
        -:  152:
        1:  153:    preG.deck[player2][0] = copper;
        1:  154:	preG.deck[player2][1] = estate;
        1:  155:	preG.deck[player2][2] = estate;
        1:  156:	preG.deck[player2][3] = estate;
        1:  157:	preG.deck[player2][4] = copper;
        -:  158:
        1:  159:    preG.deckCount[player2] = 5;
        1:  160:    preG.discardCount[player2] = 0;
        1:  161:    preG.handCount[player2] = 0;
        -:  162:
        1:  163:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  164:    cardsDiscarded = 0;
        1:  165:    buysGained = 0;
        1:  166:    coinsGained = 2;
        1:  167:    actionsGained = 0;
        1:  168:    cardsGained = 2;
        1:  169:	tributeLogic(&postG, player1, player2);
        -:  170:
        1:  171:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  172:
        1:  173:    ASSERT(preG.handCount[player2] - 2 == postG.handCount[player2]);
        -:  174:
        -:  175:/*
        -:  176:    test 5: player2 has a hand of five cards (copper, copper)
        -:  177:    expect: player1 gains +2 coins; player2 loses two cards (?)
        -:  178:*/
        1:  179:    printf("\n\nTest 5:\n");
        -:  180:
        1:  181:    preG.hand[player1][0] = minion;
        1:  182:	preG.hand[player1][1] = copper;
        1:  183:	preG.hand[player1][2] = tribute;
        1:  184:	preG.hand[player1][3] = estate;
        1:  185:	preG.hand[player1][4] = mine;
        -:  186:
        1:  187:    preG.deck[player2][0] = copper;
        1:  188:	preG.deck[player2][1] = copper;
        1:  189:	preG.deck[player2][2] = tribute;
        1:  190:	preG.deck[player2][3] = estate;
        1:  191:	preG.deck[player2][4] = mine;
        -:  192:
        1:  193:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  194:    cardsDiscarded = 0;
        1:  195:    buysGained = 0;
        1:  196:    coinsGained = 2;
        1:  197:    actionsGained = 0;
        1:  198:    cardsGained = 0;
        1:  199:	tributeLogic(&postG, player1, player2);
        -:  200:
        1:  201:    universalTest(&preG, &postG, cardsDiscarded, cardsGained, buysGained, coinsGained, actionsGained, player1);
        -:  202:
        1:  203:    ASSERT(preG.handCount[player2] - 2 == postG.handCount[player2]);
        -:  204:
        1:  205:        printf("\n\n---------------------------------End Testing Tribute--------------------------\n\n");
        -:  206:
        1:  207:    return 0;
        -:  208:}
