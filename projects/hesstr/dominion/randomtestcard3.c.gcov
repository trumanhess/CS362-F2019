        -:    0:Source:randomtestcard3.c
        -:    0:Graph:randomtestcard3.gcno
        -:    0:Data:randomtestcard3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#define MAX_HAND_COUNT 10
        -:    8:
     1001:    9:int printError(struct gameState *pre, struct gameState *post, int coinsGained, int discarded, 
        -:   10:    int cardsGained, int actionsGained, int player)
        -:   11:{
     1001:   12:    if((pre->numActions + actionsGained) != post->numActions || post->handCount[player] != pre->handCount[player] - discarded + cardsGained || (pre->coins + coinsGained) != post->coins)
        -:   13:    {
     1001:   14:        printf("\t\tNumber of Actions:\n");
     1001:   15:        printf("\t\t\tExpected: %d, Actual: %d\n", pre->numActions + actionsGained, post->numActions);
        -:   16:
     1001:   17:        printf("\t\tNumber coins:\n");
     1001:   18:        printf("\t\t\tExpected = %d, Actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   19:
     1001:   20:        printf("\t\tHand count:\n");
     1001:   21:        printf("\t\t\tExpected = %d, Actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        -:   22:    }
        -:   23:
     1001:   24:    return 0;
        -:   25:}
        -:   26:
        1:   27:int main()
        -:   28:{
        1:   29:    int cardsGainedP1 = 0;
        1:   30:    int discardedP1 = 0;
        1:   31:    int coinsGained = 0;
        1:   32:    int actionsGained = 0;
        1:   33:    int tribReveal[2] = {-1, -1};
        1:   34:    int deckDiscard = 0;
        1:   35:    int discardDiscard = 0;
        -:   36:
        1:   37:    int seed = 1000;
        1:   38:    int numPlayers = 2;
        1:   39:    int player1 = 0, player2 = 1;
        -:   40:	struct gameState preG, postG;
        1:   41:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   42:			sea_hag, baron, smithy, council_room};
        -:   43:
        1:   44:    printf("\n\n-------------Randomly Testing Tribute---------\n\n");
        1:   45:    initializeGame(numPlayers, k, seed, &preG);
        -:   46:
        1:   47:    srand(time(NULL));
        -:   48:
        1:   49:    int count = 0;
        -:   50:
     1003:   51:    while(count <= 1000)
        -:   52:    {
     1001:   53:        tribReveal[0] = -1;
     1001:   54:        tribReveal[1] = -1;
     1001:   55:        cardsGainedP1 = 0;
     1001:   56:        discardedP1 = 0;
     1001:   57:        coinsGained = 0;
     1001:   58:        actionsGained = 0;
     1001:   59:        deckDiscard = 0;
     1001:   60:        discardDiscard = 0;
        -:   61:
     1001:   62:        preG.deckCount[player2] = rand() % 6; //between 0 and 5
     1001:   63:        preG.discardCount[player2] = rand() % 6; //between 0 and 5
        -:   64:
     3462:   65:        for(int i = 0; i < preG.deckCount[player2]; i++) //use non-randomized player hand size to randomize player1s hand
        -:   66:        {
     2461:   67:            preG.deck[player1][i] = rand() % 27; //0 to 26
        -:   68:        }
        -:   69:
     3553:   70:        for(int i = 0; i < preG.discardCount[player2]; i++) //use non-randomized player hand size to randomize player2s hand
        -:   71:        {
     2552:   72:            preG.discard[player2][i] = rand() % 27; //0 to 26
        -:   73:        }
        -:   74:
     1001:   75:        if(preG.deckCount[player2] + preG.discardCount[player2] <= 1)
        -:   76:        {
       81:   77:            if(preG.deckCount[player2] > 0)
        -:   78:            {
       29:   79:                tribReveal[0] = preG.deck[player2][preG.deckCount[player2] - 1];
       29:   80:                deckDiscard = 1;
        -:   81:            }
       52:   82:            else if(preG.discardCount[player2] > 0)
        -:   83:            {
       28:   84:                tribReveal[0] = preG.discard[player2][preG.discardCount[player2] - 1];
       28:   85:                discardDiscard = 1;
        -:   86:            }
        -:   87:        }
        -:   88:        else
        -:   89:        {
      920:   90:            if(preG.deckCount[player2] == 0)
        -:   91:            {
      121:   92:                tribReveal[0] = preG.discard[player2][preG.discardCount[player2]-1];
      121:   93:                tribReveal[1] = preG.discard[player2][preG.discardCount[player2]-2];
        -:   94:            }
        -:   95:            else
        -:   96:            {            
      799:   97:                tribReveal[0] = preG.deck[player2][preG.deckCount[player2]-1];
      799:   98:                tribReveal[1] = preG.deck[player2][preG.deckCount[player2]-2];
      799:   99:                deckDiscard = 2;
        -:  100:            }
        -:  101:        }
        -:  102:
     1001:  103:        if(tribReveal[0] == tribReveal[1])
        -:  104:        {
      357:  105:            tribReveal[1] = -1;
        -:  106:        }
        -:  107:                
     3003:  108:        for(int i = 0; i < 2; i++)
        -:  109:        {
     2002:  110:            if(tribReveal[i] == copper || tribReveal[i] == silver || tribReveal[i] == gold)
        -:  111:            {
      862:  112:                coinsGained += 2;
        -:  113:            }
     1140:  114:            else if(tribReveal[i] == estate || tribReveal[i] == duchy || tribReveal[i] == province || tribReveal[i] == gardens || tribReveal[i] == great_hall)
        -:  115:            {
      377:  116:                cardsGainedP1 += 2;
        -:  117:            }
      763:  118:            else if(tribReveal[i] != -1)
        -:  119:            {
      325:  120:                actionsGained += 2;
        -:  121:            }
        -:  122:        }
        -:  123:
     1001:  124:        memcpy(&postG, &preG, sizeof(struct gameState));
        -:  125:
     1001:  126:        tributeLogic(&postG, player1, player2);
        -:  127:
     1001:  128:        printf("\nTest Number: %d\n", count);
     1001:  129:        printf("\tPlayer 1:\n");
     1001:  130:        printError(&preG, &postG, coinsGained, discardedP1, cardsGainedP1, actionsGained, player1);
     1001:  131:        printf("\tPlayer 2:\n");
     1001:  132:        printf("\t\tDeck count:\n");
     1001:  133:        printf("\t\t\tExpected: %d, After: %d\n", preG.deckCount[player2] - deckDiscard, postG.deckCount[player2]);
     1001:  134:        printf("\t\tDiscard count:\n");
     1001:  135:        printf("\t\t\tExpected: %d, After: %d\n", preG.discardCount[player2] - discardDiscard, postG.discardCount[player2]);
        -:  136:
     1001:  137:        count++;
        -:  138:    }
        -:  139:
        1:  140:    return 0;
        -:  141:}
