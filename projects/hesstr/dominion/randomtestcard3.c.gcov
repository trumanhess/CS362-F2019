        -:    0:Source:randomtestcard3.c
        -:    0:Graph:randomtestcard3.gcno
        -:    0:Data:randomtestcard3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://#include "custom_assert.h"
        -:    7:
        -:    8:
        -:    9:/*
        -:   10:vars to consider for randomization:
        -:   11:    YES:
        -:   12:        player1 state vars
        -:   13:        randomize card locations and which cards are being used in the players hand
        -:   14:        supply deck numbers
        -:   15:        the number which the player inputs for getting rid of and estate
        -:   16:
        -:   17:    NO:
        -:   18:        number players
        -:   19:
        -:   20:*/
        -:   21:
        -:   22:
        -:   23:/*
        -:   24:
        -:   25:struct gameState {
        -:   26:    int numPlayers; //number of players
        -:   27:    int supplyCount[treasure_map+1];  //this is the amount of a specific type of card given a specific number.
        -:   28:    int embargoTokens[treasure_map+1];
        -:   29:    int outpostPlayed;
        -:   30:    int outpostTurn;
        -:   31:    int whoseTurn;
        -:   32:    int phase;
        -:   33:    int numActions; /* Starts at 1 each turn
        -:   34:    int coins; /* Use as you see fit!
        -:   35:    int numBuys; /* Starts at 1 each turn
        -:   36:    int hand[MAX_PLAYERS][MAX_HAND];
        -:   37:    int handCount[MAX_PLAYERS];
        -:   38:};
        -:   39:
        -:   40:*/
        -:   41:
        -:   42:#define MAX_HAND_COUNT 10
        -:   43:
        1:   44:int main()
        -:   45:{
        1:   46:    int cardsGained = 0;
        1:   47:    int discarded = 0;
        1:   48:    int coinsGained = 0;
        1:   49:    int buysGained = 0;
        1:   50:    int actionsGained = 0;
        -:   51:
        1:   52:    int choice1 = 0, choice2 = 0, handPos = 0; //randomize player1 choice1
        1:   53:    int seed = 1000;
        1:   54:    int numPlayers = 2;
        1:   55:    int player1 = 0, player2 = 1;
        -:   56:	struct gameState preG, postG;
        1:   57:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   58:			sea_hag, baron, smithy, council_room};
        -:   59:
        1:   60:    printf("\n\n-------------Randomly Testing Mininon---------\n\n");
        1:   61:    initializeGame(numPlayers, k, seed, &preG);
        -:   62:
        1:   63:    srand(time(NULL));
        -:   64:
        1:   65:    int count = 0;
        -:   66:
     1003:   67:    while(count <= 1000)
        -:   68:    {
     1001:   69:        preG.deckCount[player2] = rand() % 6; //between 0 and 5
     1001:   70:        preG.discardCount[player2] = rand() % 6; //between 0 and 5
        -:   71:
     3542:   72:        for(int i = 0; i < preG.deckCount[player2]; i++) //use non-randomized player hand size to randomize player1s hand
        -:   73:        {
     2541:   74:            preG.deck[player1][i] = rand() % 27; //or is it 23? 0 to 26
        -:   75:        }
        -:   76:
     3407:   77:        for(int i = 0; i < preG.discardCount[player2]; i++) //use non-randomized player hand size to randomize player2s hand
        -:   78:        {
     2406:   79:            preG.discard[player2][i] = rand() % 27; //or is it 23? 0 to 26
        -:   80:        }
        -:   81:
     1001:   82:        memcpy(&postG, &preG, sizeof(struct gameState));
        -:   83:
     1001:   84:        tributeLogic(&postG, player1, player2);
        -:   85:
     1001:   86:        count++;
        -:   87:    }
        -:   88:
        1:   89:    return 0;
        -:   90:}
