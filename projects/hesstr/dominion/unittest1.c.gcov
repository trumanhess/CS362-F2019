        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://NEED TO ZERO OUT GAME STRUCTS AFTER USING THEM!!
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include "custom_assert.h"
        -:    8:
        -:    9:/*
        -:   10:    test 1: get rid of estate and have one in hand
        -:   11:    test 2: get rid of estate, but not have one in hand
        -:   12:    test 3: gain an estate
        -:   13:    test 4: try to gain an estate, but negative amount of estates in supply
        -:   14:*/
        -:   15:
        4:   16:int universalTest(struct gameState *pre, struct gameState *post, int discarded, int cardsGained, int buysGained, int coinsGained, int actionsGained, int player)
        -:   17:{
        4:   18:    printf("Number buys:\n");
        4:   19:    ASSERT((pre->numBuys + buysGained) == post->numBuys);
        4:   20:    printf("\texpected = %d, actual = %d\n", pre->numBuys + buysGained, post->numBuys);
        -:   21:
        4:   22:    printf("Number Actions:\n");
        4:   23:    ASSERT(post->numActions == pre->numActions + actionsGained);
        4:   24:    printf("\texpected = %d, actual = %d\n", pre->numActions + actionsGained, post->numActions);
        -:   25:
        4:   26:    printf("Number coins:\n");
        4:   27:    ASSERT((pre->coins + coinsGained) == post->coins);
        4:   28:    printf("\texpected = %d, actual = %d\n", pre->coins + coinsGained, post->coins);
        -:   29:
        4:   30:    printf("Hand count:\n");
        4:   31:    ASSERT(post->handCount[player] == pre->handCount[player] - discarded + cardsGained);
        4:   32:    printf("\texpected = %d, actual = %d\n", pre->handCount[player] - discarded + cardsGained, post->handCount[player]);
        -:   33:
        4:   34:    return 0;
        -:   35:}
        -:   36:
        1:   37:int main()
        -:   38:{
        1:   39:    int cardsGained = 0;
        1:   40:    int discarded = 0;
        1:   41:    int coinsGained = 0;
        1:   42:    int buysGained = 0;
        1:   43:    int actionsGained = 0;
        -:   44:
        1:   45:    int choice1 = 0;
        1:   46:    int seed = 1000;
        1:   47:    int numPlayers = 2;
        1:   48:    int thisPlayer = 0;
        -:   49:	struct gameState preG, postG;
        1:   50:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   51:			sea_hag, baron, smithy, council_room};
        -:   52:
        1:   53:    printf("\n\n-------------Testing Baron---------\n\n");
        1:   54:    initializeGame(numPlayers, k, seed, &preG);
        -:   55:
        -:   56:/* 
        -:   57:    test 1: get rid of estate and have one in hand
        -:   58:    expect: to get rid of estate and gain +4 coins 
        -:   59:*/
        1:   60:    printf("\n\nTest 1:\n");
        -:   61:
        -:   62:    //set players hand
        1:   63:    preG.hand[thisPlayer][0] = steward;
        1:   64:	preG.hand[thisPlayer][1] = copper;
        1:   65:	preG.hand[thisPlayer][2] = duchy;
        1:   66:	preG.hand[thisPlayer][3] = estate;
        1:   67:	preG.hand[thisPlayer][4] = feast;
        -:   68:
        1:   69:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   70:	choice1 = 1;
        1:   71:    discarded = 1;
        1:   72:    buysGained = 1;
        1:   73:    coinsGained = 4;
        1:   74:    actionsGained = 0;
        1:   75:    cardsGained = 0;
        1:   76:	baronLogic(choice1, &postG, thisPlayer);
        -:   77:
        1:   78:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        6:   79:    for(int i = 0; i < postG.handCount[thisPlayer]; i++)
        -:   80:    {
        5:   81:        ASSERT(postG.hand[thisPlayer][i] != estate);
        5:   82:        if(postG.hand[thisPlayer][i] == estate)
        -:   83:        {
        1:   84:            printf("estate found in hand at %d\n", i);
        -:   85:        }
        -:   86:    }
        -:   87:
        -:   88:/* 
        -:   89:    test 2: get rid of estate, but not have one in hand
        -:   90:    expect: gain an estate
        -:   91:*/
        1:   92:    printf("\n\nTest 2:\n");
        -:   93:
        -:   94:    //set player hand with no estate
        1:   95:    preG.hand[thisPlayer][0] = steward;
        1:   96:	preG.hand[thisPlayer][1] = copper;
        1:   97:	preG.hand[thisPlayer][2] = duchy;
        1:   98:	preG.hand[thisPlayer][3] = feast;
        1:   99:    preG.handCount[thisPlayer] = 4;
        -:  100:
        1:  101:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  102:	choice1 = 1;
        1:  103:    discarded = 0;
        1:  104:    buysGained = 1;
        1:  105:    coinsGained = 0;
        1:  106:    actionsGained = 0;
        1:  107:    cardsGained = 1;
        1:  108:	baronLogic(choice1, &postG, thisPlayer);
        1:  109:    printf("postG: %d\n", postG.numBuys);
        -:  110:
        1:  111:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  112:
        -:  113:    //the player should gain an estate at the highest hand pos
        1:  114:    ASSERT(postG.hand[thisPlayer][preG.handCount[thisPlayer] + 1] == estate);
        -:  115:
        -:  116:/* 
        -:  117:    test 3:
        -:  118:    to what happens when player chooses to gain an estate 
        -:  119:*/
        1:  120:    printf("\n\nTest 3:\n");
        -:  121:
        -:  122:    //set players hand
        1:  123:    preG.hand[thisPlayer][0] = steward;
        1:  124:	preG.hand[thisPlayer][1] = copper;
        1:  125:	preG.hand[thisPlayer][2] = duchy;
        1:  126:	preG.hand[thisPlayer][3] = feast;
        -:  127:
        1:  128:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  129:	choice1 = 0;
        1:  130:    discarded = 0;
        1:  131:    buysGained = 1;
        1:  132:    coinsGained = 0;
        1:  133:    actionsGained = 0;
        1:  134:    cardsGained = 1;
        1:  135:	baronLogic(choice1, &postG, thisPlayer);
        -:  136:
        1:  137:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  138:
        1:  139:    ASSERT(postG.hand[thisPlayer][postG.handCount[thisPlayer]] == estate);
        -:  140:
        -:  141:/*
        -:  142:    test 4:
        -:  143:    expected: to not gain an estate card, everything stays the same, except you get +1 buys
        -:  144:*/
        1:  145:    printf("\n\nTest 4:\n");
        -:  146:
        1:  147:    preG.hand[thisPlayer][0] = steward;
        1:  148:	preG.hand[thisPlayer][1] = copper;
        1:  149:	preG.hand[thisPlayer][2] = duchy;
        1:  150:	preG.hand[thisPlayer][3] = estate;
        1:  151:	preG.hand[thisPlayer][4] = feast;
        1:  152:    preG.supplyCount[estate] = -1;
        1:  153:    preG.handCount[thisPlayer] = 5;
        -:  154:
        1:  155:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:  156:	choice1 = 0;
        1:  157:    discarded = 0;
        1:  158:    buysGained = 1;
        1:  159:    coinsGained = 0;
        1:  160:    actionsGained = 0;
        1:  161:    cardsGained = 0;
        1:  162:	baronLogic(choice1, &postG, thisPlayer);
        -:  163:
        1:  164:    universalTest(&preG, &postG, discarded, cardsGained, buysGained, coinsGained, actionsGained, thisPlayer);
        -:  165:
        1:  166:    ASSERT(postG.supplyCount[estate] == preG.supplyCount[estate]);
        -:  167:
        1:  168:    printf("\n\n-------------End Testing Baron---------------\n\n");
        -:  169:
        1:  170:    return 0;
        -:  171:}
