        -:    0:Source:unittestbug9.c
        -:    0:Graph:unittestbug9.gcno
        -:    0:Data:unittestbug9.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        1:    8:int main()
        -:    9:{
        1:   10:    int coinsGained = 0;
        -:   11:
        1:   12:    int seed = 1000;
        1:   13:    int numPlayers = 2;
        1:   14:    int thisPlayer = 0;
        1:   15:    int nextPlayer = 1;
        -:   16:	struct gameState preG, postG;
        1:   17:	int k[6] = {ambassador, tribute, minion, mine,
        -:   18:			sea_hag, baron};
        -:   19:
        1:   20:    printf("\n\n-------------Testing Bug 9-------------\n\n");
        1:   21:    initializeGame(numPlayers, k, seed, &preG);
        -:   22:
        -:   23:/* 
        -:   24:    test 1: call tribute case on duplicate card
        -:   25:    expect: player receives 2 coin
        -:   26:*/
        1:   27:    printf("\n\nTest 1:\n");
        -:   28:
        1:   29:    preG.deckCount[nextPlayer] = 2;
        1:   30:    preG.deck[nextPlayer][0] = copper;
        1:   31:	preG.deck[nextPlayer][1] = copper;
        -:   32:
        1:   33:    preG.handCount[thisPlayer] = 1;
        1:   34:    preG.hand[thisPlayer][0] = tribute;
        -:   35:
        1:   36:    preG.playedCardCount = 0;
        -:   37:
        1:   38:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   39:	cardEffect(tribute, 0, 0, 0, &postG, 1, 0);
        -:   40:
        1:   41:    printf("\nCoin Increase:\n");
        1:   42:    printf("before: %d, after: %d\n", preG.coins, postG.coins);
        1:   43:    ASSERT(preG.coins + 2 == postG.coins);
        -:   44:
        1:   45:    printf("\nAction Increase:\n");
        1:   46:    printf("before: %d, after: %d\n", preG.numActions, postG.numActions);
        1:   47:    ASSERT(preG.numActions - 1 == postG.numActions);
        -:   48:
        1:   49:    printf("\n\n-------------End Testing Bug 9---------------\n\n");
        -:   50:
        1:   51:    return 0;
        -:   52:}
