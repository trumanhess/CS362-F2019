        -:    0:Source:unittestbug3.c
        -:    0:Graph:unittestbug3.gcno
        -:    0:Data:unittestbug3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include "custom_assert.h"
        -:    7:
        1:    8:int main()
        -:    9:{
        1:   10:    int cardsGained = 0;
        1:   11:    int discarded = 0;
        1:   12:    int coinsGained = 0;
        1:   13:    int buysGained = 0;
        1:   14:    int actionsGained = 0;
        -:   15:
        1:   16:    int choice1 = 0;
        1:   17:    int seed = 1000;
        1:   18:    int numPlayers = 2;
        1:   19:    int thisPlayer = 0;
        1:   20:    int nextPlayer = 1;
        -:   21:	struct gameState preG, postG;
        1:   22:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   23:			sea_hag, baron, smithy, council_room};
        -:   24:
        1:   25:    printf("\n\n-------------Testing Bug 3---------\n\n");
        1:   26:    initializeGame(numPlayers, k, seed, &preG);
        -:   27:
        -:   28:/* 
        -:   29:    test 1: call remodel case, trash adventurer and gain feast
        -:   30:    expect: to not gain the feast
        -:   31:*/
        1:   32:    printf("\n\nTest 1:\n");
        -:   33:
        1:   34:    preG.handCount[thisPlayer] = 5;
        1:   35:    preG.hand[thisPlayer][0] = adventurer;
        1:   36:	preG.hand[thisPlayer][1] = remodel;
        1:   37:	preG.hand[thisPlayer][2] = duchy;
        1:   38:	preG.hand[thisPlayer][3] = estate;
        1:   39:	preG.hand[thisPlayer][4] = copper;
        -:   40:
        1:   41:    preG.discardCount[thisPlayer] = 0;
        1:   42:    preG.deckCount[thisPlayer] = 0;
        -:   43:
        1:   44:    preG.playedCardCount = 0;
        -:   45:
        1:   46:    memcpy(&postG, &preG, sizeof(struct gameState));
        1:   47:	cardEffect(12, 0, 9, 0, &postG, 1, 0);
        -:   48:
        1:   49:    printf("\nCards in Discard pile:\n");
        1:   50:    printf("before: %d, after: %d\n", preG.discardCount[thisPlayer], postG.discardCount[thisPlayer]);
        1:   51:    ASSERT(preG.discardCount[thisPlayer] + 1 == postG.discardCount[thisPlayer]);
        -:   52:
        1:   53:    printf("\n\n-------------End Testing Bug 3---------------\n\n");
        -:   54:
        1:   55:    return 0;
        -:   56:}
